angular.module("da.commons.caching.templates",[]).run(["$templateCache",function(e){e.put("app/app.view.html",'<nav id="main-nav-wrapper" class="navbar navbar-default navbar-static-top"><div class="container"><div class="navbar-header"><button type="button" class="navbar-toggle" ng-click="app.navCollapsed = !app.navCollapsed"><span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span></button> <a class="navbar-brand" href="#">NG-Headless Drupal Tests</a></div><div id="navbar" class="navbar-collapse collapse" ng-class="!app.navCollapsed && \'in\'"><ul class="nav navbar-nav"><li ui-sref-active-eq="active"><a ui-sref="app.home">Home</a></li><li ui-sref-active="active-trail" class="dropdown" dropdown><a dropdown-toggle>Commons <b class="caret"></b></a><ul class="dropdown-menu" role="menu"><li ui-sref-active-eq="active"><a tabindex="-1" ui-sref="app.commons.authentication.isAuthorized">AuthenticationService</a></li><li ui-sref-active-eq="active" class="disabled"><a tabindex="-1" href="#">Directives</a></li></ul></li><li ui-sref-active="active-trail" class="dropdown" dropdown><a href="#" dropdown-toggle>Resources <b class="caret"></b></a><ul class="dropdown-menu" role="menu"><li ui-sref-active="active-trail" ui-sref-active="active-trail" class="dropdown-submenu"><a tabindex="-1" ui-sref="app.services_3x.system.connect">Services 3.x</a><ul class="dropdown-menu"><li ui-sref-active-eq="active"><a ui-sref="app.services_3x.comment.retrieve">Comments</a></li><li ui-sref-active-eq="active"><a ui-sref="app.services_3x.file.retrieve">File</a></li><li ui-sref-active-eq="active"><a ui-sref="app.services_3x.node.retrieve">Node</a></li><li ui-sref-active-eq="active"><a ui-sref="app.services_3x.system.connect">System</a></li><li ui-sref-active-eq="active"><a ui-sref="app.services_3x.taxonomy_term.retrieve">Taxonomy Terms</a></li><li ui-sref-active-eq="active"><a ui-sref="app.services_3x.taxonomy_vocabulary.retrieve">Taxonomy Vocabulary</a></li><li ui-sref-active-eq="active"><a ui-sref="app.services_3x.user.retrieve">User</a></li></ul></li><li ui-sref-active-eq="active" class="dropdown-submenu"><a ui-sref="app.services_views.views.retrieve">Services Views</a><ul class="dropdown-menu"><li ui-sref-active-eq="active"><a ui-sref="app.services_views.views.retrieve">Views</a></li></ul></li><li ui-sref-active="active-trail" class="dropdown-submenu disabled"><a href="#">Services Menu</a><ul class="dropdown-menu"><li ui-sref-active-eq="active"><a href="#">Menu</a></li></ul></li><li ui-sref-active="active-trail" class="dropdown-submenu disabled"><a href="#">Services Search</a><ul class="dropdown-menu"><li ui-sref-active-eq="active"><a href="#">Search Node</a></li><li ui-sref-active-eq="active"><a href="#">Search User</a></li></ul></li><li ui-sref-active="active-trail" class="dropdown-submenu disabled"><a href="#">Services Entity</a><ul class="dropdown-menu disabled"><li ui-sref-active-eq="active"><a href="#">Entity Comment</a></li><li ui-sref-active-eq="active"><a href="#">Entity File</a></li><li ui-sref-active-eq="active"><a href="#">Entity Node</a></li><li ui-sref-active-eq="active"><a href="#">Entity Taxonomy Terms</a></li><li ui-sref-active-eq="active"><a href="#">Entity Taxonomy Vocabulary</a></li><li ui-sref-active-eq="active"><a href="#">Entity User</a></li></ul></li><li ui-sref-active-eq="active" ui-sref-active="active-trail" class="dropdown-submenu disabled"><a href="#">Services Entity Reference</a></li><li ui-sref-active-eq="active" ui-sref-active="active-trail" class="dropdown-submenu disabled"><a href="#">Services Definition</a><ul class="dropdown-menu"><li ui-sref-active-eq="active"><a href="#">Definition</a></li></ul></li></ul></li></ul><navbar-login></navbar-login></div></div></nav><div id="main-contant-wrapper"><div class="container"><!-- THIS IS WHERE WE WILL INJECT OUR PAGE CONTENT ============================== --><div name="mainNavContent" ui-view></div></div></div><ng-include src="\'app/templates/errorMessages.html\'"></ng-include>'),e.put("app/templates/errorMessages.html",'<!-- message for a field that is required --><script type="text/ng-template" id="error-required"><div ng-message="required">This field is required</div></script><!-- message for a field that is required --><script type="text/ng-template" id="error-email"><div ng-message="email">This field is no valide email address</div></script><!-- message for a field that is number --><script type="text/ng-template" id="error-number"><div ng-message="number">This field should be a number</div></script>'),e.put("app/components/authentication/authentication.view.html",'<div id="authentication" class="service"><h1>Authentication service</h1><p>Covers all important workflows for authentication token evaluation, an access control for routes, and objects via user roles and accesslevels.</p><p>Following requests are provided:</p><br><ul id="user-tabs" class="nav nav-tabs nav-justified" role="tablist"><li ui-sref-active-eq="active"><a id="isAuthorized-tab" role="tab" ui-sref="app.commons.authentication.isAuthorized">IsAuthorized</a></li><li ui-sref-active-eq="active"><a id="login-tab" role="tab" ui-sref="app.commons.authentication.login">Login</a></li><li ui-sref-active-eq="active"><a id="logout-tab" role="tab" ui-sref="app.commons.authentication.logout">Logout</a></li><li ui-sref-active-eq="active"><a id="refreshConnection-tab" role="tab" ui-sref="app.commons.authentication.refreshConnection">RefreshConnection</a></li><li ui-sref-active-eq="active"><a id="getLastConnectTime-tab" role="tab" ui-sref="app.commons.authentication.getLastConnectTime">GetLastConnectTime</a></li><li ui-sref-active-eq="active"><a id="getConnectionState-tab" role="tab" ui-sref="app.commons.authentication.getConnectionState">GetConnectionState</a></li><li ui-sref-active-eq="active"><a id="getAuthenticationHeaders-tab" role="tab" ui-sref="app.commons.authentication.getAuthenticationHeaders">GetAuthenticationHeaders</a></li><li ui-sref-active-eq="active"><a id="getCurrentUser-tab" role="tab" ui-sref="app.commons.authentication.getCurrentUser">GetCurrentUser</a></li></ul><div class="tabs-content"><ui-view name="isAuthorized" ng-show="app.$state.includes(\'app.commons.authentication.isAuthorized\')"></ui-view><ui-view name="login" ng-show="app.$state.includes(\'app.commons.authentication.login\')"></ui-view><ui-view name="logout" ng-show="app.$state.includes(\'app.commons.authentication.logout\')"></ui-view><ui-view name="refreshConnection" ng-show="app.$state.includes(\'app.commons.authentication.refreshConnection\')"></ui-view><ui-view name="getLastConnectTime" ng-show="app.$state.includes(\'app.commons.authentication.getLastConnectTime\')"></ui-view><ui-view name="getConnectionState" ng-show="app.$state.includes(\'app.commons.authentication.getConnectionState\')"></ui-view><ui-view name="getAuthenticationHeaders" ng-show="app.$state.includes(\'app.commons.authentication.getAuthenticationHeaders\')"></ui-view><ui-view name="getCurrentUser" ng-show="app.$state.includes(\'app.commons.authentication.getCurrentUser\')"></ui-view></div></div>'),e.put("app/components/acl/acl.view.html",'<div toggle-by-accesslevel="{{app.accessLevels.user}}">AUTHED</div><div toggle-by-accesslevel="{{app.accessLevels.anon}}">NOTAUTHED</div><div toggle-by-accesslevel="{{app.accessLevels.user}}" toggle-action="hide">hide AUTHED</div><div toggle-by-accesslevel="{{app.accessLevels.anon}}" toggle-action="hide">hide NOTAUTHED</div><div toggle-by-accesslevel="{{app.accessLevels.user}}" toggle-action="show">show AUTHED</div>'),e.put("app/components/comment/comment.view.html",'<div id="comment" class="resource"><h1>Comment resource</h1><p>Link general comment functionalities to services module.<br>See <code>services/resources/comment_resource.inc</code></p><p>Following requests are provided:</p><br><ul id="comment-tabs" class="nav nav-tabs nav-justified" role="tablist"><li ui-sref-active-eq="active"><a id="retrieve-tab" role="tab" ui-sref="app.services_3x.comment.retrieve">Retrieve</a></li><li ui-sref-active-eq="active"><a id="create-tab" role="tab" ui-sref="app.services_3x.comment.create">Create</a></li><li ui-sref-active-eq="active"><a id="update-tab" role="tab" ui-sref="app.services_3x.comment.update">Update</a></li><li ui-sref-active-eq="active"><a id="delete-tab" role="tab" ui-sref="app.services_3x.comment.delete">Delete</a></li><li ui-sref-active-eq="active"><a id="index-tab" role="tab" ui-sref="app.services_3x.comment.index">Index</a></li><li ui-sref-active-eq="active"><a id="selectNodes-tab" role="tab" ui-sref="app.services_3x.comment.countAll">CountAll</a></li><li ui-sref-active-eq="active"><a id="selectNodes-tab" role="tab" ui-sref="app.services_3x.comment.countNew">CountNew</a></li></ul><div class="tabs-content"><ui-view name="retrieve" ng-show="app.$state.includes(\'app.services_3x.comment.retrieve\')"></ui-view><ui-view name="create" ng-show="app.$state.includes(\'app.services_3x.comment.create\')"></ui-view><ui-view name="update" ng-show="app.$state.includes(\'app.services_3x.comment.update\')"></ui-view><ui-view name="delete" ng-show="app.$state.includes(\'app.services_3x.comment.delete\')"></ui-view><ui-view name="index" ng-show="app.$state.includes(\'app.services_3x.comment.index\')"></ui-view><ui-view name="countAll" ng-show="app.$state.includes(\'app.services_3x.comment.countAll\')"></ui-view><ui-view name="countNew" ng-show="app.$state.includes(\'app.services_3x.comment.countNew\')"></ui-view></div></div>'),e.put("app/components/commons/commons.view.html",'<div id="Commons" class="resource"><h1 ng-click="commons.descriptionColapsed = !commons.descriptionColapsed">Commons <span class="caret" ng-class="{true:\'down\',false:\'up\'}[commons.descriptionColapsed]"></span></h1><div class="collapse" ng-class="!commons.descriptionColapsed && \'in\'"><p>The commons section contains all the functionality that is storedin commons and consists of following modules:</p><ul><li>Authentication</li><li>Directives</li></ul></div><hr><ul id="services-3x-tabs" class="nav nav-tabs nav-justified"><li ui-sref-active="active"><a ui-sref="app.commons.authentication">Authentication</a></li><li ui-sref-active="active" class="disabled"><a ui-sref="app.commons.directives">Directives</a></li></ul><div class="tabs-content"><ui-view name="authentication"></ui-view><ui-view name="directives"></ui-view></div></div>'),e.put("app/components/file/file.view.html",'<div id="file" class="resource"><h1>File resource</h1><p>Link general file functionalities to services module.<br>See <code>services/resources/file_resource.inc</code></p><p>Following requests are provided:</p><br><ul id="files-tabs" class="nav nav-tabs nav-justified" role="tablist"><li ui-sref-active-eq="active"><a id="retrieve-tab" role="tab" ui-sref="app.services_3x.file.retrieve">Retrieve</a></li><li ui-sref-active-eq="active"><a id="create-tab" role="tab" ui-sref="app.services_3x.file.create">Create</a></li><li ui-sref-active-eq="active"><a id="delete-tab" role="tab" ui-sref="app.services_3x.file.delete">Delete</a></li><li ui-sref-active-eq="active"><a id="index-tab" role="tab" ui-sref="app.services_3x.file.index">Index</a></li><li ui-sref-active-eq="active"><a class="bg-warning text-warning" id="createRaw-tab" role="tab" ui-sref="app.services_3x.file.createRaw">Create raw <i class="fa fa-warning"></i></a></li></ul><div class="tabs-content"><ui-view name="retrieve" ng-show="app.$state.includes(\'app.services_3x.file.retrieve\')"></ui-view><ui-view name="create" ng-show="app.$state.includes(\'app.services_3x.file.create\')"></ui-view><ui-view name="delete" ng-show="app.$state.includes(\'app.services_3x.file.delete\')"></ui-view><ui-view name="index" ng-show="app.$state.includes(\'app.services_3x.file.index\')"></ui-view><ui-view name="createRaw " ng-show="app.$state.includes(\'app.services_3x.file.createRaw\')"></ui-view></div></div>'),e.put("app/components/home/home.view.html",'<div id="home" class="resource"><h1>AngularJS lib for Drupal7 services 3.x module</h1><p></p></div>'),e.put("app/components/node/node.view.html",'<div id="node" class="resource"><h1>Node resource</h1><p>Link general node functionalities to services module.<br>See <code>services/resources/node_resource.inc</code><br>Following requests are provided:</p><br><ul id="node-tabs" class="nav nav-tabs nav-justified" role="tablist"><li ui-sref-active-eq="active"><a id="retrieve-tab" role="tab" ui-sref="app.services_3x.node.retrieve">Retrieve</a></li><li ui-sref-active-eq="active"><a id="create-tab" role="tab" ui-sref="app.services_3x.node.create">Create</a></li><li ui-sref-active-eq="active"><a id="update-tab" role="tab" ui-sref="app.services_3x.node.update">Update</a></li><li ui-sref-active-eq="active"><a id="delete-tab" role="tab" ui-sref="app.services_3x.node.delete">Delete</a></li><li ui-sref-active-eq="active"><a id="index-tab" role="tab" ui-sref="app.services_3x.node.index">Index</a></li><li ui-sref-active-eq="active"><a id="index-tab" role="tab" ui-sref="app.services_3x.node.files">Files</a></li><li ui-sref-active-eq="active"><a id="index-tab" role="tab" ui-sref="app.services_3x.node.comments">Comments</a></li><li ui-sref-active-eq="active"><a class="bg-warning text-warning" id="index-tab" role="tab" ui-sref="app.services_3x.node.attach_file">Attach File <i class="fa fa-warning"></i></a></li></ul><div class="tabs-content"><ui-view name="retrieve" ng-show="app.$state.includes(\'app.services_3x.node.retrieve\')"></ui-view><ui-view name="create" ng-show="app.$state.includes(\'app.services_3x.node.create\')"></ui-view><ui-view name="update" ng-show="app.$state.includes(\'app.services_3x.node.update\')"></ui-view><ui-view name="delete" ng-show="app.$state.includes(\'app.services_3x.node.delete\')"></ui-view><ui-view name="index" ng-show="app.$state.includes(\'app.services_3x.node.index\')"></ui-view><ui-view name="files" ng-show="app.$state.includes(\'app.services_3x.node.files\')"></ui-view><ui-view name="comments" ng-show="app.$state.includes(\'app.services_3x.node.comments\')"></ui-view><ui-view name="attachFile" ng-show="app.$state.includes(\'app.services_3x.node.attach_file\')"></ui-view></div></div>'),e.put("app/components/services_3x/services_3x.view.html",'<div id="Services-3x" class="resource"><h1 ng-click="services_3x.descriptionColapsed = !services_3x.descriptionColapsed">Services 3.x</h1><div><p>The <a href="https://www.drupal.org/project/services" target="_blank">services 3.x module</a> consists of following resources:</p></div><hr><ul id="services-3x-tabs" class="nav nav-tabs nav-justified"><li ui-sref-active="active"><a ui-sref="app.services_3x.comment.retrieve">Comment</a></li><li ui-sref-active="active"><a ui-sref="app.services_3x.file.retrieve">File</a></li><li ui-sref-active="active"><a ui-sref="app.services_3x.node.retrieve">Node</a></li><li ui-sref-active="active"><a ui-sref="app.services_3x.system.connect">System</a></li><li ui-sref-active="active"><a ui-sref="app.services_3x.taxonomy_term.retrieve">Taxonomy Term</a></li><li ui-sref-active="active"><a ui-sref="app.services_3x.taxonomy_vocabulary.retrieve">Taxonomy Vocabulary</a></li><li ui-sref-active="active"><a ui-sref="app.services_3x.user.retrieve">User</a></li></ul><div class="tabs-content"><ui-view name="comment"></ui-view><ui-view name="user"></ui-view><ui-view name="node"></ui-view><ui-view name="system"></ui-view><ui-view name="file"></ui-view><ui-view name="taxonomy_term"></ui-view><ui-view name="taxonomy_vocabulary"></ui-view></div></div>'),e.put("app/components/services_views/services_views.view.html",'<div id="Services-Views" class="resource"><h1 ng-click="services_views.descriptionColapsed = !services_views.descriptionColapsed">Services Views <span class="caret" ng-class="{true:\'down\',false:\'up\'}[services_views.descriptionColapsed]"></span></h1><div class="collapse" ng-class="!services_views.descriptionColapsed && \'in\'"><p>The <a href="https://www.drupal.org/project/services_views" target="_blank">services views module</a> consists of following resources:</p><ul><li>Views</li></ul></div><hr><ul id="services-views-tabs" class="nav nav-tabs nav-justified"><li ui-sref-active="active"><a>Views</a></li></ul><div class="tabs-content"><ui-view name="views"></ui-view></div></div>'),e.put("app/components/system/system.view.html",'<div id="system" class="resource"><h1>System resource</h1><p>Link general system functionalities to services module.<br>See <code>services/resources/system_resource.inc</code></p><p>Following requests are provided:</p><br><ul id="system-tabs" class="nav nav-tabs nav-justified" role="tablist"><li ui-sref-active-eq="active"><a id="connect-tab" role="tab" ui-sref="app.services_3x.system.connect">Connect</a></li><li ui-sref-active-eq="active"><a id="get-variable-tab" role="tab" ui-sref="app.services_3x.system.get_variable">getVariable</a></li><li ui-sref-active-eq="active"><a id="set-variable-tab" role="tab" ui-sref="app.services_3x.system.set_variable">setVariable</a></li><li ui-sref-active-eq="active"><a id="del-variable-tab" role="tab" ui-sref="app.services_3x.system.del_variable">delVariable</a></li></ul><div class="tabs-content"><ui-view name="connect" ng-show="app.$state.includes(\'app.services_3x.system.connect\')"></ui-view><ui-view name="getVariable" ng-show="app.$state.includes(\'app.services_3x.system.get_variable\')"></ui-view><ui-view name="setVariable" ng-show="app.$state.includes(\'app.services_3x.system.set_variable\')"></ui-view><ui-view name="delVariable" ng-show="app.$state.includes(\'app.services_3x.system.del_variable\')"></ui-view></div></div>'),e.put("app/components/taxonomy_term/taxonomy_term.view.html",'<div id="taxonomy_term" class="resource"><h1>TaxonomyTerm resource</h1><p>Link general taxonomy_term functionalities to services module.<br>See <code>services/resources/taxonomy_term_resource.inc</code></p><p>Following requests are provided:</p><br><ul id="taxonomy_term-tabs" class="nav nav-tabs nav-justified" role="tablist"><li ui-sref-active-eq="active"><a id="retrieve-tab" role="tab" ui-sref="app.services_3x.taxonomy_term.retrieve">Retrieve</a></li><li ui-sref-active-eq="active"><a id="create-tab" role="tab" ui-sref="app.services_3x.taxonomy_term.create">Create</a></li><li ui-sref-active-eq="active"><a id="update-tab" role="tab" ui-sref="app.services_3x.taxonomy_term.update">Update</a></li><li ui-sref-active-eq="active"><a id="delete-tab" role="tab" ui-sref="app.services_3x.taxonomy_term.delete">Delete</a></li><li ui-sref-active-eq="active"><a id="index-tab" role="tab" ui-sref="app.services_3x.taxonomy_term.index">Index</a></li><li ui-sref-active-eq="active"><a id="selectNodes-tab" role="tab" ui-sref="app.services_3x.taxonomy_term.selectNodes">SelectNodes</a></li></ul><div class="tabs-content"><ui-view name="retrieve" ng-show="app.$state.includes(\'app.services_3x.taxonomy_term.retrieve\')"></ui-view><ui-view name="create" ng-show="app.$state.includes(\'app.services_3x.taxonomy_term.create\')"></ui-view><ui-view name="update" ng-show="app.$state.includes(\'app.services_3x.taxonomy_term.update\')"></ui-view><ui-view name="delete" ng-show="app.$state.includes(\'app.services_3x.taxonomy_term.delete\')"></ui-view><ui-view name="index" ng-show="app.$state.includes(\'app.services_3x.taxonomy_term.index\')"></ui-view><ui-view name="selectNodes" ng-show="app.$state.includes(\'app.services_3x.taxonomy_term.selectNodes\')"></ui-view></div></div>'),e.put("app/components/taxonomy_vocabulary/taxonomy_vocabulary.view.html",'<div id="taxonomy_vocabulary" class="resource"><h1>TaxonomyVocabulary resource</h1><p>Link general taxonomy_vocabulary functionalities to services module.<br>See <code>services/resources/taxonomy_vocabulary_resource.inc</code></p><p>Following requests are provided:</p><br><ul id="taxonomy_vocabulary-tabs" class="nav nav-tabs nav-justified" role="tablist"><li ui-sref-active-eq="active"><a id="retrieve-tab" role="tab" ui-sref="app.services_3x.taxonomy_vocabulary.retrieve">Retrieve</a></li><li ui-sref-active-eq="active"><a id="create-tab" role="tab" ui-sref="app.services_3x.taxonomy_vocabulary.create">Create</a></li><li ui-sref-active-eq="active"><a id="update-tab" role="tab" ui-sref="app.services_3x.taxonomy_vocabulary.update">Update</a></li><li ui-sref-active-eq="active"><a id="delete-tab" role="tab" ui-sref="app.services_3x.taxonomy_vocabulary.delete">Delete</a></li><li ui-sref-active-eq="active"><a id="index-tab" role="tab" ui-sref="app.services_3x.taxonomy_vocabulary.index">Index</a></li><li ui-sref-active-eq="active"><a id="getTree-tab" role="tab" ui-sref="app.services_3x.taxonomy_vocabulary.getTree">GetTree</a></li></ul><div class="tabs-content"><ui-view name="retrieve" ng-show="app.$state.includes(\'app.services_3x.taxonomy_vocabulary.retrieve\')"></ui-view><ui-view name="create" ng-show="app.$state.includes(\'app.services_3x.taxonomy_vocabulary.create\')"></ui-view><ui-view name="update" ng-show="app.$state.includes(\'app.services_3x.taxonomy_vocabulary.update\')"></ui-view><ui-view name="delete" ng-show="app.$state.includes(\'app.services_3x.taxonomy_vocabulary.delete\')"></ui-view><ui-view name="index" ng-show="app.$state.includes(\'app.services_3x.taxonomy_vocabulary.index\')"></ui-view><ui-view name="getTree" ng-show="app.$state.includes(\'app.services_3x.taxonomy_vocabulary.getTree\')"></ui-view></div></div>'),e.put("app/components/user/user.view.html",'<div id="user" class="resource"><h1>User resource</h1><p>Link general user functionalities to services module.<br>See <code>services/resources/user_resource.inc</code></p><p>Following requests are provided:</p><br><ul id="user-tabs" class="nav nav-tabs nav-justified" role="tablist"><li ui-sref-active-eq="active"><a id="retrieve-tab" role="tab" ui-sref="app.services_3x.user.retrieve">Retrieve</a></li><li ui-sref-active-eq="active"><a id="create-tab" role="tab" ui-sref="app.services_3x.user.create">Create</a></li><li ui-sref-active-eq="active"><a id="update-tab" role="tab" ui-sref="app.services_3x.user.update">Update</a></li><li ui-sref-active-eq="active"><a id="delete-tab" role="tab" ui-sref="app.services_3x.user.delete">Delete</a></li><li ui-sref-active-eq="active"><a id="index-tab" role="tab" ui-sref="app.services_3x.user.index">Index</a></li><li ui-sref-active-eq="active"><a id="del-variable-tab" role="tab" ui-sref="app.services_3x.user.register">Register</a></li><li ui-sref-active-eq="active"><a id="resend-welcome-email-tab" role="tab" ui-sref="app.services_3x.user.resend_welcome_email">Resend Welcome Email</a></li><li ui-sref-active-eq="active"><a id="cancel-tab" role="tab" ui-sref="app.services_3x.user.cancel">Cancel</a></li><li ui-sref-active-eq="active"><a id="password-reset-tab" role="tab" ui-sref="app.services_3x.user.password_reset">Password Reset</a></li><li ui-sref-active-eq="active"><a id="request-new-password-tab" role="tab" ui-sref="app.services_3x.user.request_new_password">requestNewPassword</a></li><li ui-sref-active-eq="active"><a id="login-tab" role="tab" ui-sref="app.services_3x.user.login">Login</a></li><li ui-sref-active-eq="active"><a id="logout-tab" role="tab" ui-sref="app.services_3x.user.logout">Logout</a></li><li ui-sref-active-eq="active"><a id="token-tab" role="tab" ui-sref="app.services_3x.user.token">Token</a></li></ul><div class="tabs-content"><ui-view name="retrieve" ng-show="app.$state.includes(\'app.services_3x.user.retrieve\')"></ui-view><ui-view name="create" ng-show="app.$state.includes(\'app.services_3x.user.create\')"></ui-view><ui-view name="update" ng-show="app.$state.includes(\'app.services_3x.user.update\')"></ui-view><ui-view name="delete" ng-show="app.$state.includes(\'app.services_3x.user.delete\')"></ui-view><ui-view name="index" ng-show="app.$state.includes(\'app.services_3x.user.index\')"></ui-view><ui-view name="register" ng-show="app.$state.includes(\'app.services_3x.user.register\')"></ui-view><ui-view name="resendWelcomeEmail" ng-show="app.$state.includes(\'app.services_3x.user.resend_welcome_email\')"></ui-view><ui-view name="cancel" ng-show="app.$state.includes(\'app.services_3x.user.cancel\')"></ui-view><ui-view name="requestNewPassword" ng-show="app.$state.includes(\'app.services_3x.user.request_new_password\')"></ui-view><ui-view name="passwordReset" ng-show="app.$state.includes(\'app.services_3x.user.password_reset\')"></ui-view><ui-view name="login" ng-show="app.$state.includes(\'app.services_3x.user.login\')"></ui-view><ui-view name="logout" ng-show="app.$state.includes(\'app.services_3x.user.logout\')"></ui-view><ui-view name="token" ng-show="app.$state.includes(\'app.services_3x.user.token\')"></ui-view></div></div>'),e.put("app/components/views/views.view.html",'<div id="views" class="resource"><h1>Views resource</h1><p>Link general views functionalities to services_views module.<br><br></p><p>Following requests are provided:</p><ul id="views-tabs" class="nav nav-tabs nav-justified" role="tablist"><li ui-sref-active-eq="active"><a id="connect-tab" role="tab" ui-sref="app.services_views.views.retrieve">Retrieve</a></li></ul><div class="tabs-content"><ui-view name="retrieve" ng-show="app.$state.includes(\'app.services_views.views.retrieve\')"></ui-view></div></div>'),e.put("app/templates/request/request.html",'<div class="row"><div class="col-sm-3"><h4>Start time</h4><p>{{request.requestStart | date:\'hh:mm:ss,sss\'}}</p></div><div class="col-sm-3"><h4>End time</h4><p>{{request.requestEnd | date:\'hh:mm:ss,sss\'}}</p></div><div class="col-sm-3"><h4>Duration in ms</h4><p>{{request.requestDuration}}</p></div><div class="col-sm-12"><h4>Response data</h4><pre>\r\n		{{ request.data | json}}\r\n		</pre></div></div>'),e.put("app/components/authentication/templates/getAuthenticationHeaders.html",'<h3>Get authentication headers</h3><p>returns the authentication headers as object as proper request config. This function is also used in the authentication workflow.</p><div>Current connectionState:<br><pre>{{authentication.currentAuthenticationHeaders | ifEmpty:\'undefined\' | json }}</pre></div><button class="btn btn-success" ng-click="authentication.doGetAuthenticationHeaders()">getAuthenticationHeaders request</button>'),e.put("app/components/authentication/templates/getConnectionState.html","<h3>Get connection state</h3><p>This function also provides an event that is fired every time the connection state changes.</p><p class=\"well\" ng-repeat=\"(key,change) in authentication.connectionStateChanges\">ConnectionStateChange {{key}} changed at {{change.timeOfChange | date:'HH:mm:ss'}} from [{{change.from | ifEmpty:'undefined'}}] to [{{change.to | ifEmpty:'undefined'}}]</p><p>Current connectionState = <b>{{authentication.currentConnectionState| ifEmpty:'undefined'}}</b></p><button class=\"btn btn-success\" ng-click=\"authentication.doGetConnectionState()\">getConnectionState</button>"),e.put("app/components/authentication/templates/getCurrentUser.html",'<h3>Get current</h3><p>This function also provides an event that is fired every time the user object changes.</p><div class="" ng-repeat="(key,change) in authentication.currentUserChanges"><p><b>CurrentUserChange {{key}} changed at {{change.timeOfChange | date:\'HH:mm:ss\'}}</b></p><div class="row"><div class="col-sm-6"><b>From:</b><br><pre>{{change.from | json}}</pre></div><div class="col-sm-6"><b>To:</b><br><pre>{{change.to | json}}</pre></div></div></div><p>Current user:<br><pre>{{authentication.currentUser | json}}</pre></p><button class="btn btn-success" ng-click="authentication.doGetCurrentUser()">getCurrentUser</button>'),e.put("app/components/authentication/templates/getLastConnectTime.html","<h3>Get last connect time</h3><p>Last connectTime = <b>{{authentication.lastConnectionTime | date:'dd.MM.yyyy hh:mm:ss,sss' | ifEmpty:'0'}}</b></p><button class=\"btn btn-success\" ng-click=\"authentication.doGetLastConnectTime()\">getLastConnectionTime request</button>"),e.put("app/components/authentication/templates/isAuthorized.html",'<h3>Is authorized</h3><br><blockquote>You can use this function to skip routes by <a href="">adding access levels as route param</a> and check them later in your <a href="">onStateChange event callback</a>.</blockquote><br><form name="isAuthorizedForm" novalidate><div class="row"><div class="col-sm-6"><div class="form-group"><label for="isAuthorized__access_levels">Access Level: <span class="badge">{{authentication.selectedAccessLevel}}</span></label><br><div class="radio" ng-repeat="(accessLevelName, value) in authentication.accessLevels"><label><input type="radio" name="access_levels" id="isAuthorized__access_levels__{{accessLevelName}}" ng-change="authentication.updateSelectedAccessLevel(authentication.selectedAccessLevel)" ng-model="authentication.selectedAccessLevel" value="{{accessLevelName}}"> {{accessLevelName}} : {{authentication.accessLevels[accessLevelName]}}</label></div><div class="help-block"><p class="description">The access levels is a group (array) of role objects</p></div></div></div><div class="col-sm-6"><div class="form-group"><label for="isAuthorized__roles">Roles: <span class="badge"><span ng-repeat="roleId in authentication.isAuthorizedData.selectedRoles track by $index"><span ng-if="$index > 0">,</span> <span>{{roleId}}{{authentication.roles[roleId]}}</span></span></span></label><br><div class="checkbox" ng-repeat="(roleId, value) in authentication.rolesOptions"><label><input type="checkbox" name="selectedRoles[]" id="isAuthorized__roles__{{roleId}}" ng-checked="authentication.isAuthorizedData.selectedRoles[roleId]" ng-change="authentication.updateSelectedRoles(roleId)" ng-model="authentication.rolesOptions[roleId]"> {{roleId}} : {{ authentication.roles[roleId] }}</label></div><div class="help-block"><p class="description">The roles param in same as access level an array of objects</p></div></div></div></div><h2>You are: <span ng-if="authentication.isUserAuthorized" class="text-success">authorized</span> <span ng-if="authentication.isUserAuthorized === false" class="text-danger">not authorized</span></h2><hr><div class="row"><div class="col-sm-6"><p>Authorize by access level checks if at least one role of the access level is in the logged in users roles</p><button class="btn btn-success" ng-click="authentication.doIsAuthorized(\'level\')">isAuthorized by access level</button></div><div class="col-sm-6"><p>Authorize by access level and roles checks if at least one role of the access level is in the provided roles of some other user.</p><button class="btn btn-success" ng-click="authentication.doIsAuthorized(\'roles_and_level\')">Authorize by access level and roles</button></div></div></form>'),e.put("app/components/authentication/templates/login.html",'<h3>Login request</h3><accordion close-others="oneAtATime"><accordion-group heading="Login Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in authentication.loginRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="loginForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': loginForm.username.$touched && loginForm.username.$invalid || loginForm.username.$invalid && loginForm.$submitted}"><label for="login__username">Username</label><input type="text" class="form-control" name="username" id="login__username" placeholder="Name" ng-model="authentication.loginData.username" ng-maxlength="60" maxlength="61" required><form-control-feedback></form-control-feedback><div class="help-block"><p ng-if="!loginForm.username.$touched && !loginForm.$submitted || loginForm.username.$valid">The user name</p><ng-messages ng-if="loginForm.username.$invalid && loginForm.username.$touched || loginForm.$submitted" for="loginForm.username.$error"><ng-messages-include src="error-required"></ng-messages-include><div ng-message="maxlength">Your username must be less than 61 characters long</div></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': loginForm.password.$touched && loginForm.password.$invalid || loginForm.password.$invalid && loginForm.$submitted}"><label for="login__password">Password</label><input type="password" class="form-control" name="password" id="login__password" placeholder="Password" ng-model="authentication.loginData.password" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!loginForm.password.$touched && !loginForm.$submitted || loginForm.password.$valid">The plain text unencrypted password</p><ng-messages class="error" ng-if="loginForm.password.$invalid && loginForm.password.$touched || loginForm.$submitted" for="loginForm.password.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="authentication.doLogin(loginForm)">login request</button></form>'),
e.put("app/components/authentication/templates/logout.html",'<h3>Logout request</h3><accordion close-others="oneAtATime"><accordion-group heading="Logout Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in authentication.logoutRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="logoutForm" novalidate><button class="btn btn-success" ng-click="authentication.doLogout(logoutForm)">logout request</button></form>'),e.put("app/components/authentication/templates/refreshConnection.html",'<h3>Refresh connection</h3><accordion close-others="oneAtATime"><accordion-group heading="Refresh connection request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in authentication.refreshConnectionRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><div class="row"><div class="col-sm-6"><button class="btn btn-success" ng-click="authentication.doRefreshConnection()">refreshConnection request</button></div><div class="col-sm-6"><p>This function should be called on first launche or refresh page. Here is a flowchart of the workflow:<br><img src="assets/images/refreshTokenWorkflow.png"></p></div></div>'),e.put("app/components/comment/templates/countAll.html",'<h2>CountAll request</h2><p>Get comment countAll.<br>see <code>services/resources/comment_resource.inc => _comment_resource_countAll()</code></p><blockquote class="bg-warning"><h4>It\'s possible to get following error here if you require a term that not exist:</h4><small><b>Fatal error</b>: __clone method called on non-object in <b>/paths/to/your/system/sites/all/modules/services/services.module</b> on line <b>1022</b><br></small><br>@TODO find patch</blockquote><accordion close-others="oneAtATime"><accordion-group heading="countAll Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in comment.countAllRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="countAllForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': countAllForm.nid.$touched && countAllForm.nid.$invalid || countAllForm.nid.$invalid && countAllForm.$submitted}"><label for="countAll__nid">Nid</label><input type="number" class="form-control" id="countAll__nid" name="nid" placeholder="Nid" ng-model="comment.countAllData.nid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!countAllForm.nid.$touched && !countAllForm.$submitted || countAllForm.nid.$valid">The NID to count all comments.</p><ng-messages class="error" ng-if="countAllForm.nid.$invalid && countAllForm.nid.$touched || countAllForm.$submitted" for="countAllForm.nid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="comment.doCountAll(countAllForm)">countAll request</button></form>'),e.put("app/components/comment/templates/countNew.html",'<h2>CountNew request</h2><p>Get comment countNew.<br>see <code>services/resources/comment_resource.inc => _comment_resource_countNew()</code></p><blockquote class="bg-warning"><h4>It\'s possible to get following error here if you require a term that not exist:</h4><small><b>Fatal error</b>: __clone method called on non-object in <b>/paths/to/your/system/sites/all/modules/services/services.module</b> on line <b>1022</b><br></small><br>@TODO find patch</blockquote><accordion close-others="oneAtATime"><accordion-group heading="countNew Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in comment.countNewRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="countNewForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': countNewForm.nid.$touched && countNewForm.nid.$invalid || countNewForm.nid.$invalid && countNewForm.$submitted}"><label for="countNew__nid">Nid</label><input type="number" class="form-control" id="countNew__nid" name="nid" placeholder="Nid" ng-model="comment.countNewData.nid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!countNewForm.nid.$touched && !countNewForm.$submitted || countNewForm.nid.$valid">The NID to count all new comments.</p><ng-messages class="error" ng-if="countNewForm.nid.$invalid && countNewForm.nid.$touched || countNewForm.$submitted" for="countNewForm.nid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="comment.doCountNew(countNewForm)">countNew request</button></form>'),e.put("app/components/comment/templates/create.html",'<h2>Create request</h2><p>Create a new comment.<br>This function uses drupal_form_submit() and as such expects all input to match the submitting form in question.see <code>services/resources/comment_resource.inc => _comment_resource_create()</code></p><accordion close-others="oneAtATime"><accordion-group heading="Create Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in comment.createRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="createForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.nid.$touched && createForm.nid.$invalid || createForm.nid.$invalid && createForm.$submitted }"><label for="retrieve__nid">Nid</label><input type="number" class="form-control" id="retrieve__nid" name="nid" placeholder="Nid" ng-model="comment.createData.nid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.nid.$touched && !createForm.$submitted || createForm.nid.$valid">NID of the Node to save comment to</p><ng-messages class="error" ng-if="createForm.nid.$invalid && createForm.nid.$touched || createForm.$submitted" for="createForm.nid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.subject.$touched && createForm.subject.$invalid || createForm.subject.$invalid && createForm.$submitted}"><label for="create__subject">Subject</label><input type="text" class="form-control" name="subject" id="create__subject" placeholder="Subject" ng-model="comment.createData.subject" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.subject.$touched && !createForm.$submitted || createForm.subject.$valid">The comment subject</p><ng-messages class="error" ng-if="createForm.subject.$invalid && createForm.subject.$touched || createForm.$submitted" for="createForm.subject.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.comment_body_value.$touched && createForm.comment_body_value.$invalid || createForm.comment_body_value.$invalid && createForm.$submitted}"><label for="create__comment_body_value">Body Value</label><textarea class="form-control" name="comment_body_value" id="create__comment_body_value" placeholder="Body Value" ng-model="comment.createData.comment_body_value" required>\r\n		</textarea><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.comment_body_value.$touched && !createForm.$submitted || createForm.comment_body_value.$valid">The body value.</p><ng-messages class="error" ng-if="createForm.comment_body_value.$invalid && createForm.comment_body_value.$touched || createForm.$submitted" for="createForm.comment_body_value.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="comment.doCreate(createForm)">create request</button></form>'),e.put("app/components/comment/templates/delete.html",'<h2>Delete request</h2><accordion close-others="oneAtATime"><accordion-group heading="Delete Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in comment.deleteRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="deleteForm" novalidate><div class="form-errors"><div class="alert alert-danger fade in" ng-repeat="serverError in comment.deleteErrors.errors.server_errors">{{serverError}}</div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': deleteForm.cid.$touched && deleteForm.cid.$invalid || deleteForm.cid.$invalid && deleteForm.$submitted}"><label for="delete__cid">Cid</label><input type="number" class="form-control" id="delete__cid" name="cid" placeholder="Cid" ng-model="comment.deleteData.cid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!deleteForm.cid.$touched && !deleteForm.$submitted || deleteForm.cid.$valid">CID of the terms to delete</p><ng-messages class="error" ng-if="deleteForm.cid.$invalid && deleteForm.cid.$touched || deleteForm.$submitted" for="deleteForm.cid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="comment.doDelete(deleteForm)">delete request</button></form>'),e.put("app/components/comment/templates/index.html",'<h2>Index request</h2><accordion close-others="oneAtATime"><accordion-group heading="Index Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in comment.indexRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="indexForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': indexForm.page.$touched && indexForm.page.$invalid || indexForm.page.$invalid && indexForm.$submitted}"><label for="index__page">Page</label><input type="number" class="form-control" id="index__page" name="page" placeholder="Page" ng-model="comment.indexData.page"><form-control-feedback></form-control-feedback><div class="help-block"><p class="subject" ng-if="!indexForm.page.$touched && !indexForm.$submitted || indexForm.page.$valid">Number of items to display on one page</p><ng-messages class="error" ng-if="indexForm.page.$invalid && indexForm.page.$touched || indexForm.$submitted" for="indexForm.page.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': indexForm.pagesize.$touched && indexForm.pagesize.$invalid || indexForm.pagesize.$invalid && indexForm.$submitted}"><label for="index__pagesize">Pagesize</label><input type="number" class="form-control" id="index__pagesize" name="pagesize" placeholder="Pagesize" ng-model="comment.indexData.pagesize"><form-control-feedback></form-control-feedback><div class="help-block"><p class="subject" ng-if="!indexForm.pagesize.$touched && !indexForm.$submitted || indexForm.pagesize.$valid">Number of items to display on one page. (Anonymous comment are limited to 25)</p><ng-messages class="error" ng-if="indexForm.pagesize.$invalid && indexForm.pagesize.$touched || indexForm.$submitted" for="indexForm.pagesize.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group"><label ng-click="comment.indexFieldsColapsed = !comment.indexFieldsColapsed">Fields <span class="caret" ng-class="{true:\'down\',false:\'up\'}[comment.indexFieldsColapsed]"></span></label><div class="help-block"><p class="subject">Define the fields to fetched.</p></div></div><div class="well collapse" ng-class="!comment.indexFieldsColapsed && \'in\'"><div class="checkbox"><label><input type="checkbox" ng-model="comment.indexData.fields.cid"> fields.cid</label></div><div class="checkbox"><label><input type="checkbox" ng-model="comment.indexData.fields.nid"> fields.nid</label></div><div class="checkbox"><label><input type="checkbox" ng-model="comment.indexData.fields.uid"> fields.uid</label></div><div class="checkbox"><label><input type="checkbox" ng-model="comment.indexData.fields.subject"> fields.subject</label></div><div class="checkbox"><label><input type="checkbox" ng-model="comment.indexData.fields.hostname"> fields.hostname</label></div><div class="checkbox"><label><input type="checkbox" ng-model="comment.indexData.fields.created"> fields.created</label></div><div class="checkbox"><label><input type="checkbox" ng-model="comment.indexData.fields.changed"> fields.changed</label></div><div class="checkbox"><label><input type="checkbox" ng-model="comment.indexData.fields.status"> fields.status</label></div><div class="checkbox"><label><input type="checkbox" ng-model="comment.indexData.fields.name"> fields.name</label></div><div class="checkbox"><label><input type="checkbox" ng-model="comment.indexData.fields.mail"> fields.mail</label></div><div class="checkbox"><label><input type="checkbox" ng-model="comment.indexData.fields.homepage"> fields.homepage</label></div><div class="checkbox"><label><input type="checkbox" ng-model="comment.indexData.fields.language"> fields.language</label></div></div><div class="form-group"><label ng-click="comment.indexParametersColapsed = !comment.indexParametersColapsed">Parameters <span class="caret" ng-class="{true:\'down\',false:\'up\'}[comment.indexParametersColapsed]"></span></label><div class="help-block"><p class="subject">Filter by field value.</p></div></div><div class="well collapse" ng-class="!comment.indexParametersColapsed && \'in\'"><div class="form-group"><label for="index__parameters_cid">Parameter cid</label><input type="number" class="form-control" id="index__parameters_cid" placeholder="Cid" ng-model="comment.indexData.parameters.cid"></div><div class="form-group"><label for="index__parameters_nid">Parameter nid</label><input type="number" class="form-control" id="index__parameters_nid" placeholder="Nid" ng-model="comment.indexData.parameters.nid"></div><div class="form-group"><label for="index__parameters_uid">Parameter uid</label><input type="number" class="form-control" id="index__parameters_uid" placeholder="Uid" ng-model="comment.indexData.parameters.uid"></div><div class="form-group"><label for="index__parameters_subject">Parameter subject</label><input type="text" class="form-control" id="index__parameters_subject" placeholder="Subject" ng-model="comment.indexData.parameters.subject"></div><div class="form-group"><label for="index__parameters_hostname">Parameter hostname</label><input type="text" class="form-control" id="index__parameters_hostname" placeholder="Hostname" ng-model="comment.indexData.parameters.hostname"></div><div class="form-group"><label for="index__parameters_created">Parameter created</label><input type="text" class="form-control" id="index__parameters_created" placeholder="Created" ng-model="comment.indexData.parameters.created"></div><div class="form-group"><label for="index__parameters_changed">Parameter changed</label><input type="text" class="form-control" id="index__parameters_changed" placeholder="Changed" ng-model="comment.indexData.parameters.changed"></div><div class="form-group"><label for="index__parameters_signature">Parameter status</label><input type="text" class="form-control" id="index__parameters_status" placeholder="Status" ng-model="comment.indexData.parameters.status"></div><div class="form-group"><label for="index__parameters_mail">Parameter mail</label><input type="text" class="form-control" id="index__parameters_mail" placeholder="Mail" ng-model="comment.indexData.parameters.mail"></div><div class="form-group"><label for="index__parameters_name">Parameter name</label><input type="text" class="form-control" id="index__parameters_name" placeholder="Name" ng-model="comment.indexData.parameters.name"></div><div class="form-group"><label for="index__parameters_language">Parameter language</label><input type="text" class="form-control" id="index__parameters_language" placeholder="Language" ng-model="comment.indexData.parameters.language"></div></div><button class="btn btn-success" ng-click="comment.doIndex(indexForm)">index request</button></form>'),e.put("app/components/comment/templates/retrieve.html",'<h2>Retrieve request</h2><p>Get comment details.<br>see <code>services/resources/comment_resource.inc => _comment_resource_retrieve()</code></p><accordion close-others="oneAtATime"><accordion-group heading="Retrieve Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in comment.retrieveRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="retrieveForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': retrieveForm.cid.$touched && retrieveForm.cid.$invalid || retrieveForm.cid.$invalid && retrieveForm.$submitted }"><label for="retrieve__cid">Cid</label><input type="number" class="form-control" id="retrieve__cid" name="cid" placeholder="Cid" ng-model="comment.retrieveData.cid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!retrieveForm.cid.$touched && !retrieveForm.$submitted || retrieveForm.cid.$valid">CID of the comment to be loaded</p><ng-messages class="error" ng-if="retrieveForm.cid.$invalid && retrieveForm.cid.$touched || retrieveForm.$submitted" for="retrieveForm.cid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="comment.doRetrieve(retrieveForm)">retrieve request</button></form>'),e.put("app/components/comment/templates/update.html",'<h2>Update request</h2><p>Update a new comment.<br>This function uses drupal_form_submit() and as such expects all input to match the submitting form in question.see <code>services/resources/comment_resource.inc => _comment_resource_update()</code></p><accordion close-others="oneAtATime"><accordion-group heading="Update Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in comment.updateRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="updateForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.cid.$touched && updateForm.cid.$invalid || updateForm.cid.$invalid && updateForm.$submitted }"><label for="retrieve__cid">Cid</label><input type="number" class="form-control" id="retrieve__cid" name="cid" placeholder="Cid" ng-model="comment.updateData.cid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.cid.$touched && !updateForm.$submitted || updateForm.cid.$valid">CID of the Comment to update</p><ng-messages class="error" ng-if="updateForm.cid.$invalid && updateForm.cid.$touched || updateForm.$submitted" for="updateForm.cid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.subject.$touched && updateForm.subject.$invalid || updateForm.subject.$invalid && updateForm.$submitted}"><label for="update__subject">Subject</label><input type="text" class="form-control" name="subject" id="update__subject" placeholder="Subject" ng-model="comment.updateData.subject" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.subject.$touched && !updateForm.$submitted || updateForm.subject.$valid">The comment subject</p><ng-messages class="error" ng-if="updateForm.subject.$invalid && updateForm.subject.$touched || updateForm.$submitted" for="updateForm.subject.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.comment_body_value.$touched && updateForm.comment_body_value.$invalid || updateForm.comment_body_value.$invalid && updateForm.$submitted}"><label for="update__comment_body_value">Body Value</label><textarea class="form-control" name="comment_body_value" id="update__comment_body_value" placeholder="Body Value" ng-model="comment.updateData.comment_body_value" required>\r\n		</textarea><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.comment_body_value.$touched && !updateForm.$submitted || updateForm.comment_body_value.$valid">The body value.</p><ng-messages class="error" ng-if="updateForm.comment_body_value.$invalid && updateForm.comment_body_value.$touched || updateForm.$submitted" for="updateForm.comment_body_value.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="comment.doUpdate(updateForm)">update request</button></form>'),e.put("app/components/file/templates/create.html",'<h2>Create request</h2><p>Create a new file.<br>This function uses drupal_form_submit() and as such expects all input to match the submitting form in question.see <code>services/resources/file_resource.inc => _file_resource_create()</code></p><accordion close-others="oneAtATime"><accordion-group heading="Create Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in file.createRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="createForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.file.$touched && createForm.file.$invalid || createForm.file.$invalid && createForm.$submitted}"><label for="create__file">File</label><input type="text" class="form-control" name="file" id="create__file" placeholder="File" ng-model="file.createData.file" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.file.$touched && !createForm.$submitted || createForm.file.$valid">An array representing a file.</p><ng-messages class="error" ng-if="createForm.file.$invalid && createForm.file.$touched || createForm.$submitted" for="createForm.file.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.filename.$touched && createForm.filename.$invalid || createForm.filename.$invalid && createForm.$submitted}"><label for="create__filename">Filename</label><input type="text" class="form-control" name="filename" id="create__filename" placeholder="File" ng-model="file.createData.filename" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.filename.$touched && !createForm.$submitted || createForm.filename.$valid">The name of the file</p><ng-messages class="error" ng-if="createForm.filename.$invalid && createForm.filename.$touched || createForm.$submitted" for="createForm.filename.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.filesize.$touched && createForm.filesize.$invalid || createForm.filesize.$invalid && createForm.$submitted}"><label for="create__filesize">Filesize</label><input type="number" class="form-control" name="filesize" id="create__filesize" placeholder="File" ng-model="file.createData.filesize" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.filesize.$touched && !createForm.$submitted || createForm.filesize.$valid">The files size</p><ng-messages class="error" ng-if="createForm.filesize.$invalid && createForm.filesize.$touched || createForm.$submitted" for="createForm.filesize.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.filepath.$touched && createForm.filepath.$invalid || createForm.filepath.$invalid && createForm.$submitted}"><label for="create__filepath">Filepath</label><input type="text" class="form-control" name="filepath" id="create__filepath" placeholder="File" ng-model="file.createData.filepath" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.filepath.$touched && !createForm.$submitted || createForm.filepath.$valid">The path to store file</p><ng-messages class="error" ng-if="createForm.filepath.$invalid && createForm.filepath.$touched || createForm.$submitted" for="createForm.filepath.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.image_file_name.$touched && createForm.image_file_name.$invalid || createForm.image_file_name.$invalid && createForm.$submitted}"><label for="create__image_file_name">Image File Name</label><input type="text" class="form-control" name="image_file_name" id="create__image_file_name" placeholder="File" ng-model="file.createData.image_file_name" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.image_file_name.$touched && !createForm.$submitted || createForm.image_file_name.$valid">The image files name</p><ng-messages class="error" ng-if="createForm.image_file_name.$invalid && createForm.image_file_name.$touched || createForm.$submitted" for="createForm.image_file_name.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="file.doCreate(createForm)">create request</button></form>'),e.put("app/components/file/templates/createRaw.html",'<h2>Create raw request</h2><p>Create a file with raw data.<br>see <code>services/resources/file_resource.inc => _file_resource_files()</code></p><accordion close-others="oneAtATime"><accordion-group heading="CreateRaw Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in file.createRawRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="createRawForm" novalidate><button class="btn btn-success" ng-click="node.doCreateRaw(createRawForm)">Create raw request</button></form>'),e.put("app/components/file/templates/delete.html",'<h2>Delete request</h2><p>If the file is added to a node the request returns an object with the node id in it:<pre>\r\n"file": {\r\n    "node": {\r\n      "15": "1"\r\n    }\r\n}\r\n</pre>If you delete this node the file is also deleted.<br>If the file is not connected to a node you can delete it here.</p><accordion close-others="oneAtATime"><accordion-group heading="Delete Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in file.deleteRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="deleteForm" novalidate><div class="form-errors"><div class="alert alert-danger fade in" ng-repeat="serverError in file.deleteErrors.errors.server_errors">{{serverError}}</div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': deleteForm.fid.$touched && deleteForm.fid.$invalid || deleteForm.fid.$invalid && deleteForm.$submitted}"><label for="delete__fid">Fid</label><input type="number" class="form-control" id="delete__fid" name="fid" placeholder="Fid" ng-model="file.deleteData.fid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!deleteForm.fid.$touched && !deleteForm.$submitted || deleteForm.fid.$valid">FID of the file to be deleted</p><ng-messages class="error" ng-if="deleteForm.fid.$invalid && deleteForm.fid.$touched || deleteForm.$submitted" for="deleteForm.fid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="file.doDelete(deleteForm)">delete request</button></form>'),e.put("app/components/file/templates/index.html",'<h2>Index request</h2><accordion close-others="oneAtATime"><accordion-group heading="Index Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in file.indexRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="indexForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': indexForm.page.$touched && indexForm.page.$invalid || indexForm.page.$invalid && indexForm.$submitted}"><label for="index__page">Page</label><input type="number" class="form-control" id="index__page" name="page" placeholder="Page" ng-model="file.indexData.page"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!indexForm.page.$touched && !indexForm.$submitted || indexForm.page.$valid">Number of items to display on one page</p><ng-messages class="error" ng-if="indexForm.page.$invalid && indexForm.page.$touched || createForm.$submitted" for="indexForm.page.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': indexForm.pagesize.$touched && indexForm.pagesize.$invalid || indexForm.pagesize.$invalid && indexForm.$submitted}"><label for="index__pagesize">Pagesize</label><input type="number" class="form-control" id="index__pagesize" name="pagesize" placeholder="Pagesize" ng-model="file.indexData.pagesize"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!indexForm.pagesize.$touched && !indexForm.$submitted || indexForm.pagesize.$valid">Number of items to display on one page. (Anonymous file are limited to 25)</p><ng-messages class="error" ng-if="indexForm.pagesize.$invalid && indexForm.pagesize.$touched || createForm.$submitted" for="indexForm.pagesize.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group"><label ng-click="file.indexFieldsColapsed = !file.indexFieldsColapsed">Fields <span class="caret" ng-class="{true:\'down\',false:\'up\'}[file.indexFieldsColapsed]"></span></label><div class="help-block"><p class="description">Define the fields to fetched.</p></div></div><div class="well collapse" ng-class="!file.indexFieldsColapsed && \'in\'"><div class="checkbox"><label><input type="checkbox" ng-model="file.indexData.fields.fid"> fields.fid</label></div><div class="checkbox"><label><input type="checkbox" ng-model="file.indexData.fields.uid"> fields.uid</label></div><div class="checkbox"><label><input type="checkbox" ng-model="file.indexData.fields.filename"> fields.filename</label></div><div class="checkbox"><label><input type="checkbox" ng-model="file.indexData.fields.filemime"> fields.filemime</label></div><div class="checkbox"><label><input type="checkbox" ng-model="file.indexData.fields.filesize"> fields.filesize</label></div><div class="checkbox"><label><input type="checkbox" ng-model="file.indexData.fields.status"> fields.status</label></div><div class="checkbox"><label><input type="checkbox" ng-model="file.indexData.fields.timestamp"> fields.timestamp</label></div></div><div class="form-group"><label ng-click="file.indexParametersColapsed = !file.indexParametersColapsed">Parameters <span class="caret" ng-class="{true:\'down\',false:\'up\'}[file.indexParametersColapsed]"></span></label><div class="help-block"><p class="description">Filter by field value.</p></div></div><div class="well collapse" ng-class="!file.indexParametersColapsed && \'in\'"><div class="form-group"><label for="index__parameters_uid">Parameter fid</label><input type="number" class="form-control" id="index__parameters_uid" placeholder="Fid" ng-model="file.indexData.parameters.fid"></div><div class="form-group"><label for="index__parameters_uid">Parameter uid</label><input type="number" class="form-control" id="index__parameters_uid" placeholder="Uid" ng-model="file.indexData.parameters.uid"></div><div class="form-group"><label for="index__parameters_name">Parameter filename</label><input type="text" class="form-control" id="index__parameters_filename" placeholder="Filename" ng-model="file.indexData.parameters.filename"></div><div class="form-group"><label for="index__parameters_filemime">Parameter filemime</label><input type="text" class="form-control" id="index__parameters_filemime" placeholder="Filemime" ng-model="file.indexData.parameters.filemime"></div><div class="form-group"><label for="index__parameters_filesize">Parameter filesize</label><input type="text" class="form-control" id="index__parameters_filesize" placeholder="Filesize" ng-model="file.indexData.parameters.filesize"></div><div class="form-group"><label for="index__parameters_status">Parameter status</label><input type="text" class="form-control" id="index__parameters_status" placeholder="Status" ng-model="file.indexData.parameters.status"></div><div class="form-group"><label for="index__parameters_access">Parameter timestamp</label><input type="text" class="form-control" id="index__parameters_timestamp" placeholder="Timestamp" ng-model="file.indexData.parameters.timestamp"></div></div><button class="btn btn-success" ng-click="file.doIndex(indexForm)">index request</button></form>'),
e.put("app/components/file/templates/retrieve.html",'<h2>Retrieve request</h2><p>Get file details.<br>see <code>services/resources/file_resource.inc => _file_resource_retrieve()</code></p><accordion close-others="oneAtATime"><accordion-group heading="Retrieve Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in file.retrieveRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="retrieveForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': retrieveForm.fid.$touched && retrieveForm.fid.$invalid || retrieveForm.fid.$invalid && retrieveForm.$submitted }"><label for="retrieve__fid">Fid</label><input type="number" class="form-control" id="retrieve__fid" name="fid" placeholder="Fid" ng-model="file.retrieveData.fid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!retrieveForm.fid.$touched && !retrieveForm.$submitted || retrieveForm.fid.$valid">FID of the file to be loaded</p><ng-messages class="error" ng-if="retrieveForm.fid.$invalid && retrieveForm.fid.$touched || retrieveForm.$submitted" for="retrieveForm.fid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="checkbox"><label><input type="checkbox" ng-model="file.retrieveData.file_contents"> File Contents</label><div class="help-block"><p class="description">To return file contents or not.</p></div></div><div class="checkbox"><label><input type="checkbox" ng-model="file.retrieveData.image_styles"> Image Styles</label><div class="help-block"><p class="description">To return image styles or not.</p></div></div><button class="btn btn-success" ng-click="file.doRetrieve(retrieveForm)">retrieve request</button></form>'),e.put("app/components/node/templates/attachFile.html",'<h2>AttachFile request</h2><p>Get node details.<br>see <code>services/resources/node_resource.inc => _node_resource_attachFile()</code></p><accordion close-others="oneAtATime"><accordion-group heading="AttachFile Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in node.attachFileRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="attachFileForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': attachFileForm.nid.$touched && attachFileForm.nid.$invalid || attachFileForm.nid.$invalid && attachFileForm.$submitted }"><label for="attachFile__nid">Nid</label><input type="number" class="form-control" id="attachFile__nid" name="nid" placeholder="Nid" ng-model="node.attachFileData.nid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!attachFileForm.nid.$touched && !attachFileForm.$submitted || attachFileForm.nid.$valid">NID of the node to be loaded</p><ng-messages class="error" ng-if="attachFileForm.nid.$invalid && attachFileForm.nid.$touched || attachFileForm.$submitted" for="attachFileForm.nid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': attachFileForm.field_name.$touched && attachFileForm.field_name.$invalid || attachFileForm.field_name.$invalid && attachFileForm.$submitted }"><label for="attachFile__field_name">Field name</label><input type="text" class="form-control" id="attachFile__field_name" name="field_name" placeholder="Field name" ng-model="node.attachFileData.field_name" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!attachFileForm.field_name.$touched && !attachFileForm.$submitted || attachFileForm.field_name.$valid">The file field name</p><ng-messages class="error" ng-if="attachFileForm.field_name.$invalid && attachFileForm.field_name.$touched || attachFileForm.$submitted" for="attachFileForm.field_name.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': attachFileForm.attach.$touched && attachFileForm.attach.$invalid || attachFileForm.attach.$invalid && attachFileForm.$submitted }"><label for="attachFile__attach">Attach</label><input type="number" class="form-control" id="attachFile__attach" name="attach" placeholder="Attach" ng-model="node.attachFileData.attach"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!attachFileForm.attach.$touched && !attachFileForm.$submitted || attachFileForm.attach.$valid">Attach the file(s) to the node. If FALSE, this clears ALL files attached, and attaches the files</p><ng-messages class="error" ng-if="attachFileForm.attach.$invalid && attachFileForm.attach.$touched || attachFileForm.$submitted" for="attachFileForm.attach.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><label>Field values:</label><br><div class="form-group" ng-class="{ \'has-error has-feedback\': attachFileForm.field_values.title.$touched && attachFileForm.field_values.title.$invalid || attachFileForm.field_values.title.$invalid && attachFileForm.$submitted }"><label for="attachFile__attach">Title</label><input type="text" class="form-control" id="attachFile__field_values_title" name="field_values_title" placeholder="Title" ng-model="node.attachFileData.field_values.title"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!attachFileForm.field_values.title.$touched && !attachFileForm.$submitted || attachFileForm.field_values.title.$valid">The extra title field value</p><ng-messages class="error" ng-if="attachFileForm.field_values.title.$invalid && attachFileForm.field_values.title.$touched || attachFileForm.$submitted" for="attachFileForm.field_values.title.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': attachFileForm.field_values.alt.$touched && attachFileForm.field_values.alt.$invalid || attachFileForm.field_values.alt.$invalid && attachFileForm.$submitted }"><label for="attachFile__attach">Alt</label><input type="text" class="form-control" id="attachFile__field_values_alt" name="field_values_alt" placeholder="Alt" ng-model="node.attachFileData.field_values.alt"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!attachFileForm.field_values.alt.$touched && !attachFileForm.$submitted || attachFileForm.field_values.alt.$valid">The extra alt field value</p><ng-messages class="error" ng-if="attachFileForm.field_values.alt.$invalid && attachFileForm.field_values.alt.$touched || attachFileForm.$submitted" for="attachFileForm.field_values.alt.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="node.doAttachFile(attachFileForm)">Attach File request</button></form>'),e.put("app/components/node/templates/comments.html",'<h2>Comments request</h2><p>Get node details.<br>see <code>services/resources/node_resource.inc => _node_resource_comments()</code><br><blockquote class="bg-warning"><h4>It\'s possible to get following error here:</h4><small><b>Fatal error</b>: Call to undefined function services_field_permissions_comment_clean() in <b>/paths/to/your/system/sites/all/modules/services/resources/node_resource.inc</b> on line <b>614</b></small><br><a target="_blank" href="https://www.drupal.org/files/issues/services_wrong_function_call_in_node_resource-2475119-99.patch">Here</a> is a patch for this.</blockquote></p><accordion close-others="oneAtATime"><accordion-group heading="Comments Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in node.commentsRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="commentsForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': commentsForm.nid.$touched && commentsForm.nid.$invalid || commentsForm.nid.$invalid && commentsForm.$submitted }"><label for="comments__nid">Nid</label><input type="number" class="form-control" id="comments__nid" name="nid" placeholder="Nid" ng-model="node.commentsData.nid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!commentsForm.nid.$touched && !commentsForm.$submitted || commentsForm.nid.$valid">NID of the node to be loaded</p><ng-messages class="error" ng-if="commentsForm.nid.$invalid && commentsForm.nid.$touched || commentsForm.$submitted" for="commentsForm.nid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': commentsForm.count.$touched && commentsForm.count.$invalid || commentsForm.count.$invalid && commentsForm.$submitted }"><label for="comments__count">Count</label><input type="number" class="form-control" id="comments__count" name="count" placeholder="Count" ng-model="node.commentsData.count"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!commentsForm.count.$touched && !commentsForm.$submitted || commentsForm.count.$valid">Number of comments to load.</p><ng-messages class="error" ng-if="commentsForm.count.$invalid && commentsForm.count.$touched || commentsForm.$submitted" for="commentsForm.count.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': commentsForm.offset.$touched && commentsForm.offset.$invalid || commentsForm.offset.$invalid && commentsForm.$submitted }"><label for="comments__offset">Offset</label><input type="number" class="form-control" id="comments__offset" name="offset" placeholder="Offset" ng-model="node.commentsData.offset"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!commentsForm.offset.$touched && !commentsForm.$submitted || commentsForm.offset.$valid">If count is set to non-zero value, you can pass also non-zero value for start. For example to get comments from 5 to 15, pass count=10 and offset=5.</p><ng-messages class="error" ng-if="commentsForm.offset.$invalid && commentsForm.offset.$touched || commentsForm.$submitted" for="commentsForm.offset.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="node.doComments(commentsForm)">comments request</button></form>'),e.put("app/components/node/templates/create.html",'<h2>Create request</h2><p>Create a new node.<br>This function uses drupal_form_submit() and as such expects all input to match the submitting form in question.see <code>services/resources/node_resource.inc => _node_resource_create()</code></p><accordion close-others="oneAtATime"><accordion-group heading="Create Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in node.createRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="createForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.title.$touched && createForm.title.$invalid || createForm.title.$invalid && createForm.$submitted}"><label for="create__title">Title</label><input type="text" class="form-control" name="title" id="create__title" placeholder="Title" ng-model="node.createData.title" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.title.$touched && !createForm.$submitted || createForm.title.$valid">The node title</p><ng-messages class="error" ng-if="createForm.title.$invalid && createForm.title.$touched || createForm.$submitted" for="createForm.title.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.type.$touched && createForm.type.$invalid || createForm.type.$invalid && createForm.$submitted}"><label for="create__type">Type</label><input type="text" class="form-control" name="type" id="create__type" placeholder="Title" ng-model="node.createData.type" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.type.$touched && !createForm.$submitted || createForm.type.$valid">The node type. Default types are page and article</p><ng-messages class="error" ng-if="createForm.type.$invalid && createForm.type.$touched || createForm.$submitted" for="createForm.type.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.body_value.$touched && createForm.body_value.$invalid || createForm.body_value.$invalid && createForm.$submitted}"><label for="create__body_value">Body Value</label><textarea class="form-control" name="body_value" id="create__body_value" placeholder="Body Value" ng-model="node.createData.body_value" required>\r\n		</textarea><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.body_value.$touched && !createForm.$submitted || createForm.body_value.$valid">The body value.</p><ng-messages class="error" ng-if="createForm.body_value.$invalid && createForm.body_value.$touched || createForm.$submitted" for="createForm.body_value.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.body_summary.$touched && createForm.body_summary.$invalid || createForm.body_summary.$invalid && createForm.$submitted}"><label for="create__body_summary">Body Summary</label><textarea class="form-control" name="body_summary" id="create__body_summary" placeholder="Body Summary" ng-model="node.createData.body_summary" required>\r\n		</textarea><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.body_summary.$touched && !createForm.$submitted || createForm.body_summary.$valid">The body summary</p><ng-messages class="error" ng-if="createForm.body_summary.$invalid && createForm.body_summary.$touched || createForm.$submitted" for="createForm.body_summary.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.field_custom_field.$touched && createForm.field_custom_field.$invalid || createForm.field_custom_field.$invalid && createForm.$submitted}"><label for="create__field_custom_field">Custom Field</label><input type="field_custom_field" class="form-control" name="field_custom_field" id="create__field_custom_field" placeholder="custom_field" ng-model="node.createData.field_custom_field" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.field_custom_field.$touched && !createForm.$submitted || createForm.field_custom_field.$valid">The nodes custom_field. ( Custom field. Needs to be <a target="_blank" href="https://www.drupal.org/node/1354202">formated properly</a>. )</p><ng-messages class="error" ng-if="createForm.field_custom_field.$invalid && createForm.field_custom_field.$touched || createForm.$submitted" for="createForm.field_custom_field.$error"></ng-messages></div></div><button class="btn btn-success" ng-click="node.doCreate(createForm)">create request</button></form>'),e.put("app/components/node/templates/delete.html",'<h2>Delete request</h2><accordion close-others="oneAtATime"><accordion-group heading="Delete Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in node.deleteRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="deleteForm" novalidate><div class="form-errors"><div class="alert alert-danger fade in" ng-repeat="serverError in node.deleteErrors.errors.server_errors">{{serverError}}</div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': deleteForm.nid.$touched && deleteForm.nid.$invalid || deleteForm.nid.$invalid && deleteForm.$submitted}"><label for="delete__nid">Nid</label><input type="number" class="form-control" id="delete__nid" name="nid" placeholder="Nid" ng-model="node.deleteData.nid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!deleteForm.nid.$touched && !deleteForm.$submitted || deleteForm.nid.$valid">NID of the node to be loaded</p><ng-messages class="error" ng-if="deleteForm.nid.$invalid && deleteForm.nid.$touched || deleteForm.$submitted" for="deleteForm.nid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="node.doDelete(deleteForm)">delete request</button></form>'),e.put("app/components/node/templates/files.html",'<h2>Files request</h2><p>Get node details.<br>see <code>services/resources/node_resource.inc => _node_resource_files()</code></p><accordion close-others="oneAtATime"><accordion-group heading="Files Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in node.filesRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="filesForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': filesForm.nid.$touched && filesForm.nid.$invalid || filesForm.nid.$invalid && filesForm.$submitted }"><label for="files__nid">Nid</label><input type="number" class="form-control" id="files__nid" name="nid" placeholder="Nid" ng-model="node.filesData.nid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!filesForm.nid.$touched && !filesForm.$submitted || filesForm.nid.$valid">NID of the node to be loaded</p><ng-messages class="error" ng-if="filesForm.nid.$invalid && filesForm.nid.$touched || filesForm.$submitted" for="filesForm.nid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="checkbox"><label><input type="checkbox" ng-model="node.filesData.file_contents"> File contents</label><div class="help-block">To return file contents or not.</div></div><div class="checkbox"><label><input type="checkbox" ng-model="node.filesData.image_styles"> Image Styles</label><div class="help-block">To return image styles or not.</div></div><button class="btn btn-success" ng-click="node.doFiles(filesForm)">files request</button></form>'),e.put("app/components/node/templates/index.html",'<h2>Index request</h2><accordion close-others="oneAtATime"><accordion-group heading="Index Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in node.indexRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="indexForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': indexForm.page.$touched && indexForm.page.$invalid || indexForm.page.$invalid && indexForm.$submitted}"><label for="index__page">Page</label><input type="number" class="form-control" id="index__page" name="page" placeholder="Page" ng-model="node.indexData.page"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!indexForm.page.$touched && !indexForm.$submitted || indexForm.page.$valid">Number of items to display on one page</p><ng-messages class="error" ng-if="indexForm.page.$invalid && indexForm.page.$touched || indexForm.$submitted" for="indexForm.page.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': indexForm.pagesize.$touched && indexForm.pagesize.$invalid || indexForm.pagesize.$invalid && indexForm.$submitted}"><label for="index__pagesize">Pagesize</label><input type="number" class="form-control" id="index__pagesize" name="pagesize" placeholder="Pagesize" ng-model="node.indexData.pagesize"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!indexForm.pagesize.$touched && !indexForm.$submitted || indexForm.pagesize.$valid">Number of items to display on one page. (Anonymous node are limited to 25)</p><ng-messages class="error" ng-if="indexForm.pagesize.$invalid && indexForm.pagesize.$touched || indexForm.$submitted" for="indexForm.pagesize.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group"><label ng-click="node.indexFieldsColapsed = !node.indexFieldsColapsed">Fields <span class="caret" ng-class="{true:\'down\',false:\'up\'}[node.indexFieldsColapsed]"></span></label><div class="help-block"><p class="description">Define the fields to fetched.</p></div></div><div class="well collapse" ng-class="!node.indexFieldsColapsed && \'in\'"><div class="checkbox"><label><input type="checkbox" ng-model="node.indexData.fields.nid"> fields.nid</label></div><div class="checkbox"><label><input type="checkbox" ng-model="node.indexData.fields.vid"> fields.vid</label></div><div class="checkbox"><label><input type="checkbox" ng-model="node.indexData.fields.title"> fields.title</label></div><div class="checkbox"><label><input type="checkbox" ng-model="node.indexData.fields.status"> fields.status</label></div><div class="checkbox"><label><input type="checkbox" ng-model="node.indexData.fields.comment"> fields.comment</label></div><div class="checkbox"><label><input type="checkbox" ng-model="node.indexData.fields.promote"> fields.promote</label></div><div class="checkbox"><label><input type="checkbox" ng-model="node.indexData.fields.sticky"> fields.sticky</label></div><div class="checkbox"><label><input type="checkbox" ng-model="node.indexData.fields.created"> fields.created</label></div><div class="checkbox"><label><input type="checkbox" ng-model="node.indexData.fields.changed"> fields.changed</label></div><div class="checkbox"><label><input type="checkbox" ng-model="node.indexData.fields.type"> fields.type</label></div><div class="checkbox"><label><input type="checkbox" ng-model="node.indexData.fields.language"> fields.language</label></div><div class="checkbox"><label><input type="checkbox" ng-model="node.indexData.fields.tnid"> fields.tnid</label></div><div class="checkbox"><label><input type="checkbox" ng-model="node.indexData.fields.translate"> fields.translate</label></div></div><div class="form-group"><label ng-click="node.indexParametersColapsed = !node.indexParametersColapsed">Parameters <span class="caret" ng-class="{true:\'down\',false:\'up\'}[node.indexParametersColapsed]"></span></label><div class="help-block"><p class="description">Filter by field value.</p></div></div><div class="well collapse" ng-class="!node.indexParametersColapsed && \'in\'"><div class="form-group"><label for="index__parameters_nid">Parameter nid</label><input type="number" class="form-control" id="index__parameters_nid" placeholder="Nid" ng-model="node.indexData.parameters.nid"></div><div class="form-group"><label for="index__parameters_vid">Parameter vid</label><input type="number" class="form-control" id="index__parameters_vid" placeholder="Vid" ng-model="node.indexData.parameters.vid"></div><div class="form-group"><label for="index__parameters_title">Parameter title</label><input type="text" class="form-control" id="index__parameters_title" placeholder="Title" ng-model="node.indexData.parameters.title"></div><div class="form-group"><label for="index__parameters_status">Parameter status</label><input type="text" class="form-control" id="index__parameters_status" placeholder="Status" ng-model="node.indexData.parameters.status"></div><div class="form-group"><label for="index__parameters_comment">Parameter comment</label><input type="text" class="form-control" id="index__parameters_comment" placeholder="Comment" ng-model="node.indexData.parameters.comment"></div><div class="form-group"><label for="index__parameters_promote">Parameter promote</label><input type="text" class="form-control" id="index__parameters_promote" placeholder="Promote" ng-model="node.indexData.parameters.promote"></div><div class="form-group"><label for="index__parameters_sticky">Parameter sticky</label><input type="text" class="form-control" id="index__parameters_sticky" placeholder="Sticky" ng-model="node.indexData.parameters.sticky"></div><div class="form-group"><label for="index__parameters_created">Parameter created</label><input type="text" class="form-control" id="index__parameters_created" placeholder="Created" ng-model="node.indexData.parameters.created"></div><div class="form-group"><label for="index__parameters_changed">Parameter changed</label><input type="text" class="form-control" id="index__parameters_changed" placeholder="Changed" ng-model="node.indexData.parameters.changed"></div><div class="form-group"><label for="index__parameters_type">Parameter type</label><input type="text" class="form-control" id="index__parameters_type" placeholder="Type" ng-model="node.indexData.parameters.type"></div><div class="form-group"><label for="index__parameters_language">Parameter language</label><input type="text" class="form-control" id="index__parameters_language" placeholder="Language" ng-model="node.indexData.parameters.language"></div><div class="form-group"><label for="index__parameters_tnid">Parameter tnid</label><input type="text" class="form-control" id="index__parameters_tnid" placeholder="Tnid" ng-model="node.indexData.parameters.tnid"></div><div class="form-group"><label for="index__parameters_timezone">Parameter translate</label><input type="text" class="form-control" id="index__parameters_translate" placeholder="Translate" ng-model="node.indexData.parameters.translate"></div></div><button class="btn btn-success" ng-click="node.doIndex(indexForm)">index request</button></form>'),e.put("app/components/node/templates/retrieve.html",'<h2>Retrieve request</h2><p>Get node details.<br>see <code>services/resources/node_resource.inc => _node_resource_retrieve()</code></p><accordion close-others="oneAtATime"><accordion-group heading="Retrieve Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in node.retrieveRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="retrieveForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': retrieveForm.nid.$touched && retrieveForm.nid.$invalid || retrieveForm.nid.$invalid && retrieveForm.$submitted }"><label for="retrieve__nid">Nid</label><input type="number" class="form-control" id="retrieve__nid" name="nid" placeholder="Nid" ng-model="node.retrieveData.nid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!retrieveForm.nid.$touched && !retrieveForm.$submitted || retrieveForm.nid.$valid">NID of the node to be loaded</p><ng-messages class="error" ng-if="retrieveForm.nid.$invalid && retrieveForm.nid.$touched || retrieveForm.$submitted" for="retrieveForm.nid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="node.doRetrieve(retrieveForm)">retrieve request</button></form>'),e.put("app/components/node/templates/update.html",'<h2>Update request</h2><accordion close-others="oneAtATime"><accordion-group heading="Update Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in node.updateRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="updateForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.nid.$touched && updateForm.nid.$invalid || updateForm.nid.$invalid && updateForm.$submitted}"><label for="update__nid">Nid</label><input type="number" class="form-control" id="update__nid" name="nid" placeholder="Nid" ng-model="node.updateData.nid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.nid.$touched && !updateForm.$submitted || updateForm.nid.$valid">NID of the node to be loaded</p><ng-messages class="error" ng-if="updateForm.nid.$invalid && updateForm.nid.$touched || updateForm.$submitted" for="updateForm.nid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.title.$touched && updateForm.title.$invalid || updateForm.title.$invalid && updateForm.$submitted}"><label for="update__title">Title</label><input type="text" class="form-control" name="title" id="update__title" placeholder="Title" ng-model="node.updateData.title" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.title.$touched && !updateForm.$submitted || updateForm.title.$valid">The node title</p><ng-messages class="error" ng-if="updateForm.title.$invalid && updateForm.title.$touched || updateForm.$submitted" for="updateForm.title.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.body_value.$touched && updateForm.body_value.$invalid || updateForm.body_value.$invalid && updateForm.$submitted}"><label for="update__body_value">Body Value</label><textarea class="form-control" name="body_value" id="update__body_value" placeholder="Body Value" ng-model="node.updateData.body_value" required>\r\n		</textarea><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.body_value.$touched && !updateForm.$submitted || updateForm.body_value.$valid">The body value.</p><ng-messages class="error" ng-if="updateForm.body_value.$invalid && updateForm.body_value.$touched || updateForm.$submitted" for="updateForm.body_value.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.body_summary.$touched && updateForm.body_summary.$invalid || updateForm.body_summary.$invalid && updateForm.$submitted}"><label for="update__body_summary">Body Summary</label><textarea class="form-control" name="body_summary" id="update__body_summary" placeholder="Body Summary" ng-model="node.updateData.body_summary" required>\r\n		</textarea><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.body_summary.$touched && !updateForm.$submitted || updateForm.body_summary.$valid">The body summary</p><ng-messages class="error" ng-if="updateForm.body_summary.$invalid && updateForm.body_summary.$touched || updateForm.$submitted" for="updateForm.body_summary.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.field_custom_field.$touched && updateForm.field_custom_field.$invalid || updateForm.field_custom_field.$invalid && updateForm.$submitted}"><label for="update__field_custom_field">Custom Field</label><input type="field_custom_field" class="form-control" name="field_custom_field" id="update__field_custom_field" placeholder="custom_field" ng-model="node.updateData.field_custom_field" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.field_custom_field.$touched && !updateForm.$submitted || updateForm.field_custom_field.$valid">The nodes custom_field. ( Custom field. Needs to be <a target="_blank" href="https://www.drupal.org/node/1354202">formated properly</a>. )</p><ng-messages class="error" ng-if="updateForm.field_custom_field.$invalid && updateForm.field_custom_field.$touched || updateForm.$submitted" for="updateForm.field_custom_field.$error"></ng-messages></div></div><button class="btn btn-success" ng-click="node.doUpdate(updateForm)">update request</button></form>'),
e.put("app/components/system/templates/connect.html",'<h2>Connect request</h2><p>Returns the details of currently logged in user.<br>object with session id, session name and a user object.<br>See <code>services/resources/system_resource.inc</code></p><hr><accordion close-others="oneAtATime"><accordion-group heading="Connect Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in system.connectRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="connectForm" novalidate><button class="btn btn-success" ng-click="system.doConncet(connectForm)">connect request</button></form>'),e.put("app/components/system/templates/delVariable.html",'<h2>Del Variable request</h2><p>Unsets a persistent variable.<br>Case-sensitivity of the variable_* functions depends on the database collation used. To avoid problems, always use lower case for persistent variable names.<br>See <a target="_blank" href="https://api.drupal.org/api/drupal/includes!bootstrap.inc/function/variable_del/7" title="variable_del">variable_del</a> and <code>services/resources/system_resource.inc</code></p><hr><accordion close-others="oneAtATime"><accordion-group heading="Del Variable Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in system.delVariableRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="delVariableForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': delVariableForm.name.$touched && delVariableForm.name.$invalid || delVariableForm.name.$invalid && delVariableForm.$submitted}"><label for="del_variable__name">Name</label><input type="text" name="name" class="form-control" id="del_variable__name" placeholder="Variable name" ng-model="system.delVariableData.name" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!delVariableForm.name.$touched && !delVariableForm.$submitted || delVariableForm.name.$valid">The name of the variable to return</p><ng-messages class="error" ng-if="delVariableForm.name.$invalid && delVariableForm.name.$touched || delVariableForm.$submitted" for="delVariableForm.name.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="system.doDelVariable(delVariableForm)">del_variable request</button></form>'),e.put("app/components/system/templates/getVariable.html",'<h2>Get Variable request</h2><p>Returns a persistent variable.<br>Case-sensitivity of the variable_* functions depends on the database collation used. To avoid problems, always use lower case for persistent variable names.<br>See <a target="_blank" href="https://api.drupal.org/api/drupal/includes!bootstrap.inc/function/variable_get/7" title="variable_get">variable_get</a> and <code>services/resources/system_resource.inc</code></p><hr><accordion close-others="oneAtATime"><accordion-group heading="Get Variable Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in system.getVariableRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="getVariableForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': getVariableForm.name.$touched && getVariableForm.name.$invalid || getVariableForm.name.$invalid && getVariableForm.$submitted}"><label for="get_variable__name">Name</label><input type="text" name="name" class="form-control" id="get_variable__name" placeholder="Variable name" ng-model="system.getVariableData.name" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!getVariableForm.name.$touched && !getVariableForm.$submitted || getVariableForm.name.$valid">The name of the variable to return</p><ng-messages class="error" ng-if="getVariableForm.name.$invalid && getVariableForm.name.$touched || getVariableForm.$submitted" for="getVariableForm.name.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group"><label for="get_variable__default">Default</label><input type="text" class="form-control" id="get_variable__default" placeholder="Variable default" ng-model="system.getVariableData.default"><div class="help-block"><div>The default value to use if this variable has never been set</div></div></div><button class="btn btn-success" ng-click="system.doGetVariable(getVariableForm)">get_variable request</button></form>'),e.put("app/components/system/templates/setVariable.html",'<h2>Set Variable request</h2><p>Sets a persistent variable.<br>Case-sensitivity of the variable_* functions depends on the database collation used. To avoid problems, always use lower case for persistent variable names.<br>See <a target="_blank" href="https://api.drupal.org/api/drupal/includes!bootstrap.inc/function/variable_set/7" title="variable_set">variable_set</a> and <code>services/resources/system_resource.inc</code></p><hr><accordion close-others="oneAtATime"><accordion-group heading="Set Variable Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in system.setVariableRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="setVariableForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': setVariableForm.name.$touched && setVariableForm.name.$invalid || setVariableForm.name.$invalid && setVariableForm.$submitted}"><label for="set_variable__name">Name</label><input type="text" name="name" class="form-control" id="set_variable__name" placeholder="Variable name" ng-model="system.setVariableData.name" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!setVariableForm.name.$touched && !setVariableForm.$submitted || setVariableForm.name.$valid">The name of the variable to return</p><ng-messages class="error" ng-if="setVariableForm.name.$invalid && setVariableForm.name.$touched || setVariableForm.$submitted" for="setVariableForm.name.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': setVariableForm.value.$touched && setVariableForm.value.$invalid || setVariableForm.value.$invalid && setVariableForm.$submitted}"><label for="set_variable__value">Value</label><input type="text" name="value" class="form-control" id="set_variable__value" placeholder="Variable value" ng-model="system.setVariableData.value" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!setVariableForm.value.$touched && !setVariableForm.$submitted || setVariableForm.value.$valid">The value to set. This can be any PHP data type; these functions take care of serialization as necessary</p><ng-messages class="error" ng-if="setVariableForm.value.$invalid && setVariableForm.value.$touched || setVariableForm.$submitted" for="setVariableForm.value.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="system.doSetVariable(setVariableForm)">set_variable request</button></form>'),e.put("app/components/taxonomy_term/templates/create.html",'<h2>Create request</h2><p>Create a new taxonomy_term.<br>This function uses drupal_form_submit() and as such expects all input to match the submitting form in question.see <code>services/resources/taxonomy_term_resource.inc => _taxonomy_term_resource_create()</code></p><accordion close-others="oneAtATime"><accordion-group heading="Create Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in taxonomy_term.createRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="createForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.vid.$touched && createForm.vid.$invalid || createForm.vid.$invalid && createForm.$submitted}"><label class="control-label" for="create__parent">Vid</label><input type="number" class="form-control" name="vid" id="create__vid" placeholder="Vid" ng-model="taxonomy_term.createData.vid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description">VID of the taxonomy terms vocabolary</p></div><ng-messages class="error" ng-if="createForm.vid.$invalid && createForm.vid.$touched || createForm.$submitted" for="createForm.vid.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.name.$touched && createForm.name.$invalid || createForm.name.$invalid && createForm.$submitted}"><label for="create__name">Name</label><input type="text" class="form-control" name="name" id="create__name" placeholder="Name" ng-model="taxonomy_term.createData.name" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.name.$touched && !createForm.$submitted || createForm.name.$valid">The terms name</p><ng-messages class="error" ng-if="createForm.name.$invalid && createForm.name.$touched || createForm.$submitted" for="createForm.name.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.description.$touched && createForm.description.$invalid || createForm.description.$invalid && createForm.$submitted}"><label for="create__description">Description</label><input type="text" class="form-control" name="description" id="create__description" placeholder="Description" ng-model="taxonomy_term.createData.description"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.description.$touched && !createForm.$submitted || createForm.description.$valid">The description of the term</p></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.weight.$touched && createForm.weight.$invalid || createForm.weight.$invalid && createForm.$submitted}"><label for="create__weight">Weight</label><input type="number" class="form-control" name="weight" id="create__weight" placeholder="Weight" ng-model="taxonomy_term.createData.weight"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.weight.$touched && !createForm.$submitted || createForm.weight.$valid">The weight/order of term</p><ng-messages class="error" ng-if="createForm.weight.$invalid && createForm.weight.$touched || createForm.$submitted" for="createForm.weight.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.parent.$touched && createForm.parent.$invalid || createForm.parent.$invalid && createForm.$submitted}"><label class="control-label" for="create__parent">Parent</label><input type="number" class="form-control" name="parent" id="create__parent" placeholder="Parent" ng-model="taxonomy_term.createData.parent"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description">Parent term tid.</p></div><ng-messages class="error" ng-if="createForm.parent.$invalid && createForm.parent.$touched || createForm.$submitted" for="createForm.parent.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.format.$touched && createForm.format.$invalid || createForm.format.$invalid && createForm.$submitted}"><label class="control-label" for="create__format">Format</label><input type="text" class="form-control" name="format" id="create__format" placeholder="Format" ng-model="taxonomy_term.createData.format"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description">Format of description</p></div></div><button class="btn btn-success" ng-click="taxonomy_term.doCreate(createForm)">create request</button></form>'),e.put("app/components/taxonomy_term/templates/delete.html",'<h2>Delete request</h2><accordion close-others="oneAtATime"><accordion-group heading="Delete Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in taxonomy_term.deleteRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="deleteForm" novalidate><div class="form-errors"><div class="alert alert-danger fade in" ng-repeat="serverError in taxonomy_term.deleteErrors.errors.server_errors">{{serverError}}</div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': deleteForm.tid.$touched && deleteForm.tid.$invalid || deleteForm.tid.$invalid && deleteForm.$submitted}"><label for="delete__tid">Tid</label><input type="number" class="form-control" id="delete__tid" name="tid" placeholder="Tid" ng-model="taxonomy_term.deleteData.tid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!deleteForm.tid.$touched && !deleteForm.$submitted || deleteForm.tid.$valid">TID of the terms to delete</p><ng-messages class="error" ng-if="deleteForm.tid.$invalid && deleteForm.tid.$touched || deleteForm.$submitted" for="deleteForm.tid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="taxonomy_term.doDelete(deleteForm)">delete request</button></form>'),e.put("app/components/taxonomy_term/templates/index.html",'<h2>Index request</h2><accordion close-others="oneAtATime"><accordion-group heading="Index Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in taxonomy_term.indexRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="indexForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': indexForm.page.$touched && indexForm.page.$invalid || indexForm.page.$invalid && indexForm.$submitted}"><label for="index__page">Page</label><input type="number" class="form-control" id="index__page" name="page" placeholder="Page" ng-model="taxonomy_term.indexData.page"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!indexForm.page.$touched && !indexForm.$submitted || indexForm.page.$valid">Number of items to display on one page</p><ng-messages class="error" ng-if="indexForm.page.$invalid && indexForm.page.$touched || indexForm.$submitted" for="indexForm.page.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': indexForm.pagesize.$touched && indexForm.pagesize.$invalid || indexForm.pagesize.$invalid && indexForm.$submitted}"><label for="index__pagesize">Pagesize</label><input type="number" class="form-control" id="index__pagesize" name="pagesize" placeholder="Pagesize" ng-model="taxonomy_term.indexData.pagesize"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!indexForm.pagesize.$touched && !indexForm.$submitted || indexForm.pagesize.$valid">Number of items to display on one page. (Anonymous taxonomy_term are limited to 25)</p><ng-messages class="error" ng-if="indexForm.pagesize.$invalid && indexForm.pagesize.$touched || indexForm.$submitted" for="indexForm.pagesize.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group"><label ng-click="taxonomy_term.indexFieldsColapsed = !taxonomy_term.indexFieldsColapsed">Fields <span class="caret" ng-class="{true:\'down\',false:\'up\'}[taxonomy_term.indexFieldsColapsed]"></span></label><div class="help-block"><p class="description">Define the fields to fetched.</p></div></div><div class="well collapse" ng-class="!taxonomy_term.indexFieldsColapsed && \'in\'"><div class="checkbox"><label><input type="checkbox" ng-model="taxonomy_term.indexData.fields.tid"> fields.tid</label></div><div class="checkbox"><label><input type="checkbox" ng-model="taxonomy_term.indexData.fields.vid"> fields.vid</label></div><div class="checkbox"><label><input type="checkbox" ng-model="taxonomy_term.indexData.fields.name"> fields.name</label></div><div class="checkbox"><label><input type="checkbox" ng-model="taxonomy_term.indexData.fields.description"> fields.description</label></div><div class="checkbox"><label><input type="checkbox" ng-model="taxonomy_term.indexData.fields.weight"> fields.weight</label></div><div class="checkbox"><label><input type="checkbox" ng-model="taxonomy_term.indexData.fields.parent"> fields.parent</label></div><div class="checkbox"><label><input type="checkbox" ng-model="taxonomy_term.indexData.fields.format"> fields.format</label></div></div><div class="form-group"><label ng-click="taxonomy_term.indexParametersColapsed = !taxonomy_term.indexParametersColapsed">Parameters <span class="caret" ng-class="{true:\'down\',false:\'up\'}[taxonomy_term.indexParametersColapsed]"></span></label><div class="help-block"><p class="description">Filter by field value.</p></div></div><div class="well collapse" ng-class="!taxonomy_term.indexParametersColapsed && \'in\'"><div class="form-group"><label for="index__parameters_tid">Parameter tid</label><input type="number" class="form-control" id="index__parameters_tid" placeholder="Tid" ng-model="taxonomy_term.indexData.parameters.tid"></div><div class="form-group"><label for="index__parameters_vid">Parameter vid</label><input type="number" class="form-control" id="index__parameters_vid" placeholder="Vid" ng-model="taxonomy_term.indexData.parameters.vid"></div><div class="form-group"><label for="index__parameters_name">Parameter name</label><input type="text" class="form-control" id="index__parameters_name" placeholder="TaxonomyTermname" ng-model="taxonomy_term.indexData.parameters.name"></div><div class="form-group"><label for="index__parameters_description">Parameter description</label><input type="text" class="form-control" id="index__parameters_description" placeholder="Description" ng-model="taxonomy_term.indexData.parameters.description"></div><div class="form-group"><label for="index__parameters_weight">Parameter weight</label><input type="text" class="form-control" id="index__parameters_weight" placeholder="Weight" ng-model="taxonomy_term.indexData.parameters.weight"></div><div class="form-group"><label for="index__parameters_signature">Parameter parent</label><input type="text" class="form-control" id="index__parameters_parent" placeholder="Parent" ng-model="taxonomy_term.indexData.parameters.parent"></div><div class="form-group"><label for="index__parameters_format">Parameter format</label><input type="text" class="form-control" id="index__parameters_format" placeholder="Signature Format" ng-model="taxonomy_term.indexData.parameters.format"></div><div class="form-group"><label for="index__parameters_created">Parameter created</label><input type="text" class="form-control" id="index__parameters_created" placeholder="Created" ng-model="taxonomy_term.indexData.parameters.created"></div></div><button class="btn btn-success" ng-click="taxonomy_term.doIndex(indexForm)">index request</button></form>'),e.put("app/components/taxonomy_term/templates/retrieve.html",'<h2>Retrieve request</h2><p>Get taxonomy_term details.<br>see <code>services/resources/taxonomy_term_resource.inc => _taxonomy_term_resource_retrieve()</code></p><blockquote class="bg-warning"><h4>It\'s possible to get following error here if you require a term that not exist:</h4><small><b>Fatal error</b>: __clone method called on non-object in <b>/paths/to/your/system/sites/all/modules/services/services.module</b> on line <b>1022</b><br></small><br>@TODO find patch</blockquote><accordion close-others="oneAtATime"><accordion-group heading="Retrieve Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in taxonomy_term.retrieveRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="retrieveForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': retrieveForm.tid.$touched && retrieveForm.tid.$invalid || retrieveForm.tid.$invalid && retrieveForm.$submitted }"><label for="retrieve__tid">Tid</label><input type="number" class="form-control" id="retrieve__tid" name="tid" placeholder="Tid" ng-model="taxonomy_term.retrieveData.tid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!retrieveForm.tid.$touched && !retrieveForm.$submitted || retrieveForm.tid.$valid">TID of the taxonomy_term to be loaded</p><ng-messages class="error" ng-if="retrieveForm.tid.$invalid && retrieveForm.tid.$touched || retrieveForm.$submitted" for="retrieveForm.tid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="taxonomy_term.doRetrieve(retrieveForm)">retrieve request</button></form>'),e.put("app/components/taxonomy_term/templates/selectNodes.html",'<h2>SelectNodes request</h2><p>Get taxonomy_term selectNodes.<br>see <code>services/resources/taxonomy_term_resource.inc => _taxonomy_term_resource_selectNodes()</code></p><blockquote class="bg-warning"><h4>It\'s possible to get following error here if you require a term that not exist:</h4><small><b>Fatal error</b>: __clone method called on non-object in <b>/paths/to/your/system/sites/all/modules/services/services.module</b> on line <b>1022</b><br></small><br>@TODO find patch</blockquote><accordion close-others="oneAtATime"><accordion-group heading="SelectNodes Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in taxonomy_term.selectNodesRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="selectNodesForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': selectNodesForm.tid.$touched && selectNodesForm.tid.$invalid || selectNodesForm.tid.$invalid && selectNodesForm.$submitted }"><label for="retrieve__tid">Tid</label><input type="number" class="form-control" id="retrieve__tid" name="tid" placeholder="Tid" ng-model="taxonomy_term.selectNodesData.tid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!selectNodesForm.tid.$touched && !selectNodesForm.$submitted || selectNodesForm.tid.$valid">The vocabulary ids to retrieve, separated by comma.</p><ng-messages class="error" ng-if="selectNodesForm.tid.$invalid && selectNodesForm.tid.$touched || selectNodesForm.$submitted" for="selectNodesForm.tid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': selectNodesForm.pager.$touched && selectNodesForm.pager.$invalid || selectNodesForm.pager.$invalid && selectNodesForm.$submitted}"><label for="index__pager">Page</label><input type="number" class="form-control" id="index__pager" name="pager" placeholder="Pager" ng-model="taxonomy_term.selectNodesData.pager"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!selectNodesForm.pager.$touched && !selectNodesForm.$submitted || selectNodesForm.pager.$valid">Whether the nodes are to be used with a pager (the case on most Drupal pagers) or not (in an XML feed, for example).</p><ng-messages class="error" ng-if="selectNodesForm.pager.$invalid && selectNodesForm.pager.$touched || selectNodesForm.$submitted" for="selectNodesForm.pager.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': selectNodesForm.limit.$touched && selectNodesForm.limit.$invalid || selectNodesForm.limit.$invalid && selectNodesForm.$submitted}"><label for="index__limit">Limit</label><input type="number" class="form-control" id="index__limit" name="limit" placeholder="Limit" ng-model="taxonomy_term.selectNodesData.limit"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!selectNodesForm.limit.$touched && !selectNodesForm.$submitted || selectNodesForm.limit.$valid">Maximum number of nodes to find.</p><ng-messages class="error" ng-if="selectNodesForm.limit.$invalid && selectNodesForm.limit.$touched || selectNodesForm.$submitted" for="selectNodesForm.limit.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': selectNodesForm.order.$touched && selectNodesForm.order.$invalid || selectNodesForm.order.$invalid && selectNodesForm.$submitted}"><label for="index__order">Limit</label><input type="number" class="form-control" id="index__order" name="order" placeholder="Order" ng-model="taxonomy_term.selectNodesData.order"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!selectNodesForm.order.$touched && !selectNodesForm.$submitted || selectNodesForm.order.$valid">The order clause for the query that retrieve the nodes.</p><ng-messages class="error" ng-if="selectNodesForm.order.$invalid && selectNodesForm.order.$touched || selectNodesForm.$submitted" for="selectNodesForm.order.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="taxonomy_term.doSelectNodes(selectNodesForm)">selectNodes request</button></form>'),e.put("app/components/taxonomy_term/templates/update.html",'<h2>Update request</h2><accordion close-others="oneAtATime"><accordion-group heading="Update Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in taxonomy_term.updateRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="updateForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.tid.$touched && updateForm.tid.$invalid || updateForm.tid.$invalid && updateForm.$submitted }"><label for="retrieve__tid">Tid</label><input type="number" class="form-control" id="retrieve__tid" name="tid" placeholder="Tid" ng-model="taxonomy_term.updateData.tid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.tid.$touched && !updateForm.$submitted || updateForm.tid.$valid">TID of the taxonomy_term to be loaded</p><ng-messages class="error" ng-if="updateForm.tid.$invalid && updateForm.tid.$touched || updateForm.$submitted" for="updateForm.tid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.vid.$touched && updateForm.vid.$invalid || updateForm.vid.$invalid && updateForm.$submitted }"><label for="retrieve__vid">Vid</label><input type="number" class="form-control" id="retrieve__vid" name="vid" placeholder="Vid" ng-model="taxonomy_term.updateData.vid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.vid.$touched && !updateForm.$submitted || updateForm.vid.$valid">VID of the taxonomy terms vocabolary</p><ng-messages class="error" ng-if="updateForm.vid.$invalid && updateForm.vid.$touched || updateForm.$submitted" for="updateForm.vid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.name.$touched && updateForm.name.$invalid || updateForm.name.$invalid && updateForm.$submitted}"><label for="create__name">Name</label><input type="text" class="form-control" name="name" id="create__name" placeholder="Name" ng-model="taxonomy_term.updateData.name"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.name.$touched && !updateForm.$submitted || updateForm.name.$valid">The terms name</p><ng-messages class="error" ng-if="updateForm.name.$invalid && updateForm.name.$touched || updateForm.$submitted" for="updateForm.name.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.description.$touched && updateForm.description.$invalid || updateForm.description.$invalid && updateForm.$submitted}"><label for="create__description">Description</label><input type="text" class="form-control" name="description" id="create__description" placeholder="Description" ng-model="taxonomy_term.updateData.description"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.description.$touched && !updateForm.$submitted || updateForm.description.$valid">The description of the term</p><ng-messages class="error" ng-if="updateForm.description.$invalid && updateForm.description.$touched || updateForm.$submitted" for="updateForm.description.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.weight.$touched && updateForm.weight.$invalid || updateForm.weight.$invalid && updateForm.$submitted}"><label for="create__weight">Weight</label><input type="text" class="form-control" name="weight" id="create__weight" placeholder="Weight" ng-model="taxonomy_term.updateData.weight"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.weight.$touched && !updateForm.$submitted || updateForm.weight.$valid">The weight/order of term</p><ng-messages class="error" ng-if="updateForm.weight.$invalid && updateForm.weight.$touched || updateForm.$submitted" for="updateForm.weight.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.parent.$touched && updateForm.parent.$invalid || updateForm.parent.$invalid && updateForm.$submitted}"><label class="control-label" for="create__parent">Parent</label><input type="text" class="form-control" name="parent" id="create__parent" placeholder="Parent" ng-model="taxonomy_term.updateData.parent"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description">Parent term tid.</p></div><ng-messages class="error" ng-if="updateForm.parent.$invalid && updateForm.parent.$touched || updateForm.$submitted" for="updateForm.parent.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.format.$touched && updateForm.format.$invalid || updateForm.format.$invalid && updateForm.$submitted}"><label class="control-label" for="create__format">Format</label><input type="text" class="form-control" name="format" id="create__format" placeholder="Format" ng-model="taxonomy_term.updateData.format"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description">Format of description</p></div><ng-messages class="error" ng-if="updateForm.format.$invalid && updateForm.format.$touched || updateForm.$submitted" for="updateForm.format.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div><button class="btn btn-success" ng-click="taxonomy_term.doUpdate(updateForm)">update request</button></form>'),
e.put("app/components/taxonomy_vocabulary/templates/create.html",'<h2>Create request</h2><p>Create a new taxonomy_vocabulary.<br>This function uses drupal_form_submit() and as such expects all input to match the submitting form in question.see <code>services/resources/taxonomy_vocabulary_resource.inc => _taxonomy_vocabulary_resource_create()</code></p><accordion close-others="oneAtATime"><accordion-group heading="Create Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in taxonomy_vocabulary.createRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="createForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.name.$touched && createForm.name.$invalid || createForm.name.$invalid && createForm.$submitted}"><label for="create__name">Name</label><input type="text" class="form-control" name="name" id="create__name" placeholder="Name" ng-model="taxonomy_vocabulary.createData.name" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.name.$touched && !createForm.$submitted || createForm.name.$valid">The terms name</p><ng-messages class="error" ng-if="createForm.name.$invalid && createForm.name.$touched || createForm.$submitted" for="createForm.name.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.machine_name.$touched && createForm.machine_name.$invalid || createForm.machine_name.$invalid && createForm.$submitted}"><label for="create__machine_name">Machine Name</label><input type="text" class="form-control" name="machine_name" id="create__machine_name" placeholder="Machine Name" ng-model="taxonomy_vocabulary.createData.machine_name" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.machine_name.$touched && !createForm.$submitted || createForm.machine_name.$valid">The terms machine_name</p><ng-messages class="error" ng-if="createForm.machine_name.$invalid && createForm.machine_name.$touched || createForm.$submitted" for="createForm.machine_name.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.description.$touched && createForm.description.$invalid || createForm.description.$invalid && createForm.$submitted}"><label for="create__description">Description</label><input type="text" class="form-control" name="description" id="create__description" placeholder="Description" ng-model="taxonomy_vocabulary.createData.description"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.description.$touched && !createForm.$submitted || createForm.description.$valid">The description of the term</p></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.hierarchy.$touched && createForm.hierarchy.$invalid || createForm.hierarchy.$invalid && createForm.$submitted}"><label for="create__hierarchy">Hierarchy</label><input type="number" class="form-control" name="hierarchy" id="create__hierarchy" placeholder="Hierarchy" ng-model="taxonomy_vocabulary.createData.hierarchy"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.hierarchy.$touched && !createForm.$submitted || createForm.hierarchy.$valid">The hierarchy of term</p><ng-messages class="error" ng-if="createForm.hierarchy.$invalid && createForm.hierarchy.$touched || createForm.$submitted" for="createForm.hierarchy.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.weight.$touched && createForm.weight.$invalid || createForm.weight.$invalid && createForm.$submitted}"><label for="create__weight">Weight</label><input type="number" class="form-control" name="weight" id="create__weight" placeholder="Weight" ng-model="taxonomy_vocabulary.createData.weight"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.weight.$touched && !createForm.$submitted || createForm.weight.$valid">The weight/order of term</p><ng-messages class="error" ng-if="createForm.weight.$invalid && createForm.weight.$touched || createForm.$submitted" for="createForm.weight.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="taxonomy_vocabulary.doCreate(createForm)">create request</button></form>'),e.put("app/components/taxonomy_vocabulary/templates/delete.html",'<h2>Delete request</h2><accordion close-others="oneAtATime"><accordion-group heading="Delete Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in taxonomy_vocabulary.deleteRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="deleteForm" novalidate><div class="form-errors"><div class="alert alert-danger fade in" ng-repeat="serverError in taxonomy_vocabulary.deleteErrors.errors.server_errors">{{serverError}}</div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': deleteForm.tid.$touched && deleteForm.tid.$invalid || deleteForm.tid.$invalid && deleteForm.$submitted}"><label for="delete__tid">Tid</label><input type="number" class="form-control" id="delete__tid" name="tid" placeholder="Tid" ng-model="taxonomy_vocabulary.deleteData.tid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!deleteForm.tid.$touched && !deleteForm.$submitted || deleteForm.tid.$valid">TID of the terms to delete</p><ng-messages class="error" ng-if="deleteForm.tid.$invalid && deleteForm.tid.$touched || deleteForm.$submitted" for="deleteForm.tid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="taxonomy_vocabulary.doDelete(deleteForm)">delete request</button></form>'),e.put("app/components/taxonomy_vocabulary/templates/getTree.html",'<h2>GetTree request</h2><p>Get taxonomy_vocabulary getTree.<br>see <code>services/resources/taxonomy_vocabulary_resource.inc => _taxonomy_vocabulary_resource_getTree()</code></p><accordion close-others="oneAtATime"><accordion-group heading="SelectNodes Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in taxonomy_vocabulary.getTreeRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="getTreeForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': getTreeForm.vid.$touched && getTreeForm.vid.$invalid || getTreeForm.vid.$invalid && getTreeForm.$submitted }"><label for="retrieve__vid">Vid</label><input type="number" class="form-control" id="retrieve__vid" name="vid" placeholder="Vid" ng-model="taxonomy_vocabulary.getTreeData.vid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!getTreeForm.vid.$touched && !getTreeForm.$submitted || getTreeForm.vid.$valid">The vocabulary ids to retrieve, separated by comma.</p><ng-messages class="error" ng-if="getTreeForm.vid.$invalid && getTreeForm.vid.$touched || getTreeForm.$submitted" for="getTreeForm.vid.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': getTreeForm.parent.$touched && getTreeForm.parent.$invalid || getTreeForm.parent.$invalid && getTreeForm.$submitted}"><label for="index__parent">Parent</label><input type="number" class="form-control" id="index__parent" name="parent" placeholder="Parent" ng-model="taxonomy_vocabulary.getTreeData.parent"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!getTreeForm.parent.$touched && !getTreeForm.$submitted || getTreeForm.parent.$valid">The term ID under which to generate the tree. If 0, generate the tree for the entire vocabulary.</p><ng-messages class="error" ng-if="getTreeForm.parent.$invalid && getTreeForm.parent.$touched || getTreeForm.$submitted" for="getTreeForm.parent.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': getTreeForm.maxdepth.$touched && getTreeForm.maxdepth.$invalid || getTreeForm.maxdepth.$invalid && getTreeForm.$submitted}"><label for="index__maxdepth">Maxdepth</label><input type="number" class="form-control" id="index__maxdepth" name="maxdepth" placeholder="Maxdepth" ng-model="taxonomy_vocabulary.getTreeData.maxdepth"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!getTreeForm.maxdepth.$touched && !getTreeForm.$submitted || getTreeForm.maxdepth.$valid">Maximum number of nodes to find.</p><ng-messages class="error" ng-if="getTreeForm.maxdepth.$invalid && getTreeForm.maxdepth.$touched || getTreeForm.$submitted" for="getTreeForm.maxdepth.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': getTreeForm.load_entities.$touched && getTreeForm.load_entities.$invalid || getTreeForm.load_entities.$invalid && getTreeForm.$submitted}"><label for="index__load_entities">Load Entities</label><input type="number" class="form-control" id="index__load_entities" name="load_entities" placeholder="Load Entities" ng-model="taxonomy_vocabulary.getTreeData.load_entities"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!getTreeForm.load_entities.$touched && !getTreeForm.$submitted || getTreeForm.load_entities.$valid">Whether the tree of terms should contain full term entity objects. If 1 (TRUE), a full entity load will occur on the term objects. Otherwise they are partial objects to save execution time and memory consumption. Defaults to 0 (FALSE).</p><ng-messages class="error" ng-if="getTreeForm.load_entities.$invalid && getTreeForm.load_entities.$touched || getTreeForm.$submitted" for="getTreeForm.load_entities.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="taxonomy_vocabulary.doGetTree(getTreeForm)">getTree request</button></form>'),e.put("app/components/taxonomy_vocabulary/templates/index.html",'<h2>Index request</h2><accordion close-others="oneAtATime"><accordion-group heading="Index Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in taxonomy_vocabulary.indexRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="indexForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': indexForm.page.$touched && indexForm.page.$invalid || indexForm.page.$invalid && indexForm.$submitted}"><label for="index__page">Page</label><input type="number" class="form-control" id="index__page" name="page" placeholder="Page" ng-model="taxonomy_vocabulary.indexData.page"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!indexForm.page.$touched && !indexForm.$submitted || indexForm.page.$valid">Number of items to display on one page</p><ng-messages class="error" ng-if="indexForm.page.$invalid && indexForm.page.$touched || indexForm.$submitted" for="indexForm.page.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': indexForm.pagesize.$touched && indexForm.pagesize.$invalid || indexForm.pagesize.$invalid && indexForm.$submitted}"><label for="index__pagesize">Pagesize</label><input type="number" class="form-control" id="index__pagesize" name="pagesize" placeholder="Pagesize" ng-model="taxonomy_vocabulary.indexData.pagesize"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!indexForm.pagesize.$touched && !indexForm.$submitted || indexForm.pagesize.$valid">Number of items to display on one page. (Anonymous taxonomy_vocabulary are limited to 25)</p><ng-messages class="error" ng-if="indexForm.pagesize.$invalid && indexForm.pagesize.$touched || indexForm.$submitted" for="indexForm.pagesize.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group"><label ng-click="taxonomy_vocabulary.indexFieldsColapsed = !taxonomy_vocabulary.indexFieldsColapsed">Fields <span class="caret" ng-class="{true:\'down\',false:\'up\'}[taxonomy_vocabulary.indexFieldsColapsed]"></span></label><div class="help-block"><p class="description">Define the fields to fetched.</p></div></div><div class="well collapse" ng-class="!taxonomy_vocabulary.indexFieldsColapsed && \'in\'"><div class="checkbox"><label><input type="checkbox" ng-model="taxonomy_vocabulary.indexData.fields.vid"> fields.vid</label></div><div class="checkbox"><label><input type="checkbox" ng-model="taxonomy_vocabulary.indexData.fields.name"> fields.name</label></div><div class="checkbox"><label><input type="checkbox" ng-model="taxonomy_vocabulary.indexData.fields.machine_name"> fields.machine_name</label></div><div class="checkbox"><label><input type="checkbox" ng-model="taxonomy_vocabulary.indexData.fields.description"> fields.description</label></div><div class="checkbox"><label><input type="checkbox" ng-model="taxonomy_vocabulary.indexData.fields.weight"> fields.weight</label></div><div class="checkbox"><label><input type="checkbox" ng-model="taxonomy_vocabulary.indexData.fields.hierarchy"> fields.hierarchy</label></div></div><div class="form-group"><label ng-click="taxonomy_vocabulary.indexParametersColapsed = !taxonomy_vocabulary.indexParametersColapsed">Parameters <span class="caret" ng-class="{true:\'down\',false:\'up\'}[taxonomy_vocabulary.indexParametersColapsed]"></span></label><div class="help-block"><p class="description">Filter by field value.</p></div></div><div class="well collapse" ng-class="!taxonomy_vocabulary.indexParametersColapsed && \'in\'"><div class="form-group"><label for="index__parameters_vid">Parameter vid</label><input type="number" class="form-control" id="index__parameters_vid" placeholder="Vid" ng-model="taxonomy_vocabulary.indexData.parameters.vid"></div><div class="form-group"><label for="index__parameters_name">Parameter name</label><input type="text" class="form-control" id="index__parameters_name" placeholder="TaxonomyVocabularyname" ng-model="taxonomy_vocabulary.indexData.parameters.name"></div><div class="form-group"><label for="index__parameters_machine_name">Parameter machine_name</label><input type="text" class="form-control" id="index__parameters_machine_name" placeholder="Machine Name" ng-model="taxonomy_vocabulary.indexData.parameters.machine_name"></div><div class="form-group"><label for="index__parameters_description">Parameter description</label><input type="text" class="form-control" id="index__parameters_description" placeholder="Description" ng-model="taxonomy_vocabulary.indexData.parameters.description"></div><div class="form-group"><label for="index__parameters_weight">Parameter weight</label><input type="text" class="form-control" id="index__parameters_weight" placeholder="Weight" ng-model="taxonomy_vocabulary.indexData.parameters.weight"></div><div class="form-group"><label for="index__parameters_signature">Parameter hierarchy</label><input type="text" class="form-control" id="index__parameters_hierarchy" placeholder="Parent" ng-model="taxonomy_vocabulary.indexData.parameters.hierarchy"></div></div><button class="btn btn-success" ng-click="taxonomy_vocabulary.doIndex(indexForm)">index request</button></form>'),e.put("app/components/taxonomy_vocabulary/templates/retrieve.html",'<h2>Retrieve request</h2><p>Get taxonomy_vocabulary details.<br>see <code>services/resources/taxonomy_vocabulary_resource.inc => _taxonomy_vocabulary_resource_retrieve()</code></p><blockquote class="bg-warning"><h4>It\'s possible to get following error here if you require a term that not exist:</h4><small><b>Fatal error</b>: __clone method called on non-object in <b>/paths/to/your/system/sites/all/modules/services/services.module</b> on line <b>1022</b><br></small><br>@TODO find patch</blockquote><accordion close-others="oneAtATime"><accordion-group heading="Retrieve Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in taxonomy_vocabulary.retrieveRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="retrieveForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': retrieveForm.vid.$touched && retrieveForm.vid.$invalid || retrieveForm.vid.$invalid && retrieveForm.$submitted }"><label for="retrieve__vid">Vid</label><input type="number" class="form-control" id="retrieve__vid" name="vid" placeholder="Vid" ng-model="taxonomy_vocabulary.retrieveData.vid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!retrieveForm.vid.$touched && !retrieveForm.$submitted || retrieveForm.vid.$valid">VID of the taxonomy vocabulary to be loaded</p><ng-messages class="error" ng-if="retrieveForm.vid.$invalid && retrieveForm.vid.$touched || retrieveForm.$submitted" for="retrieveForm.vid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="taxonomy_vocabulary.doRetrieve(retrieveForm)">retrieve request</button></form>'),e.put("app/components/taxonomy_vocabulary/templates/update.html",'<h2>Update request</h2><accordion close-others="oneAtATime"><accordion-group heading="Update Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in taxonomy_vocabulary.updateRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="updateForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.vid.$touched && updateForm.vid.$invalid || updateForm.vid.$invalid && updateForm.$submitted }"><label for="retrieve__tid">Vid</label><input type="number" class="form-control" id="retrieve__vid" name="vid" placeholder="Vid" ng-model="taxonomy_vocabulary.updateData.vid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.tid.$touched && !updateForm.$submitted || updateForm.tid.$valid">VID of the taxonomy_vocabulary to be loaded</p><ng-messages class="error" ng-if="updateForm.vid.$invalid && updateForm.vid.$touched || updateForm.$submitted" for="updateForm.vid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.name.$touched && updateForm.name.$invalid || updateForm.name.$invalid && updateForm.$submitted}"><label for="create__name">Name</label><input type="text" class="form-control" name="name" id="create__name" placeholder="Name" ng-model="taxonomy_vocabulary.updateData.name" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.name.$touched && !updateForm.$submitted || updateForm.name.$valid">The terms name</p><ng-messages class="error" ng-if="updateForm.name.$invalid && updateForm.name.$touched || updateForm.$submitted" for="updateForm.name.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.machine_name.$touched && updateForm.machine_name.$invalid || updateForm.machine_name.$invalid && updateForm.$submitted}"><label for="create__machine_name">Machine Name</label><input type="text" class="form-control" name="machine_name" id="create__machine_name" placeholder="Machine Name" ng-model="taxonomy_vocabulary.updateData.machine_name"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.machine_name.$touched && !updateForm.$submitted || updateForm.machine_name.$valid">The terms machine_name</p><ng-messages class="error" ng-if="updateForm.machine_name.$invalid && updateForm.machine_name.$touched || updateForm.$submitted" for="updateForm.machine_name.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.description.$touched && updateForm.description.$invalid || updateForm.description.$invalid && updateForm.$submitted}"><label for="create__description">Description</label><input type="text" class="form-control" name="description" id="create__description" placeholder="Description" ng-model="taxonomy_vocabulary.updateData.description"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.description.$touched && !updateForm.$submitted || updateForm.description.$valid">The description of the term</p></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.hierarchy.$touched && updateForm.hierarchy.$invalid || updateForm.hierarchy.$invalid && updateForm.$submitted}"><label for="create__hierarchy">Hierarchy</label><input type="number" class="form-control" name="hierarchy" id="create__hierarchy" placeholder="Hierarchy" ng-model="taxonomy_vocabulary.updateData.hierarchy"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.hierarchy.$touched && !updateForm.$submitted || updateForm.hierarchy.$valid">The hierarchy of term</p><ng-messages class="error" ng-if="updateForm.hierarchy.$invalid && updateForm.hierarchy.$touched || updateForm.$submitted" for="updateForm.hierarchy.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.weight.$touched && updateForm.weight.$invalid || updateForm.weight.$invalid && updateForm.$submitted}"><label for="create__weight">Weight</label><input type="number" class="form-control" name="weight" id="create__weight" placeholder="Weight" ng-model="taxonomy_vocabulary.updateData.weight"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.weight.$touched && !updateForm.$submitted || updateForm.weight.$valid">The weight/order of term</p><ng-messages class="error" ng-if="updateForm.weight.$invalid && updateForm.weight.$touched || updateForm.$submitted" for="updateForm.weight.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="taxonomy_vocabulary.doUpdate(updateForm)">update request</button></form>'),e.put("app/components/user/templates/RequestNewPassword.html",'<h2>Request new password request</h2><accordion close-others="oneAtATime"><accordion-group heading="Request new password Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in user.requestNewPasswordRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="requestNewPasswordForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': requestNewPasswordForm.uid.$touched && requestNewPasswordForm.uid.$invalid || requestNewPasswordForm.uid.$invalid && requestNewPasswordForm.$submitted}"><label for="passwordReset__uid">Uid</label><input type="number" class="form-control" id="passwordReset__uid" name="uid" placeholder="Uid" ng-model="user.passwordResetData.uid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!requestNewPasswordForm.uid.$touched && !requestNewPasswordForm.$submitted || requestNewPasswordForm.uid.$valid">UID of the user to reset password</p><ng-messages class="error" ng-if="requestNewPasswordForm.uid.$invalid && requestNewPasswordForm.uid.$touched || requestNewPasswordForm.$submitted" for="requestNewPasswordForm.uid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="user.doRequestNewPassword(requestNewPasswordForm)">request new password request</button></form>'),e.put("app/components/user/templates/cancel.html",'<h2>Cancel request</h2><accordion close-others="oneAtATime"><accordion-group heading="Cancel Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in user.cancelRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="cancelForm"><div class="form-group" ng-class="{ \'has-error has-feedback\': cancelForm.uid.$touched && cancelForm.uid.$invalid || cancelForm.uid.$invalid && cancelForm.$submitted }"><label for="cancel__uid">Uid</label><input type="number" class="form-control" id="cancel__uid" placeholder="Uid" name="uid" ng-model="user.cancelData.uid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!cancelForm.uid.$touched && !cancelForm.$submitted || cancelForm.uid.$valid">UID of the user to be canceled</p><ng-messages class="error" ng-if="cancelForm.uid.$invalid && cancelForm.uid.$touched || cancelForm.$submitted" for="cancelForm.uid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="user.doCancel(cancelForm)">resend welcome email request</button></form>'),e.put("app/components/user/templates/create.html",'<h2>Create request</h2><p>Create a new user.<br>This function uses drupal_form_submit() and as such expects all input to match the submitting form in question.see <code>services/resources/user_resource.inc => _user_resource_create()</code></p><accordion close-others="oneAtATime"><accordion-group heading="Create Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in user.createRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="createForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.name.$touched && createForm.name.$invalid || createForm.name.$invalid && createForm.$submitted}"><label for="create__name">Name</label><input type="text" class="form-control" name="name" id="create__name" placeholder="Name" ng-model="user.createData.name" ng-maxlength="60" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.name.$touched && !createForm.$submitted || createForm.name.$valid">The user name</p><ng-messages class="error" ng-if="createForm.name.$invalid && createForm.name.$touched || createForm.$submitted" for="createForm.name.$error"><ng-messages-include src="error-required"></ng-messages-include><div ng-message="maxlength">Your username must be less than 61 characters long</div></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.email.$touched && createForm.email.$invalid || createForm.email.$invalid && createForm.$submitted}"><label for="create__email">Email</label><input type="email" class="form-control" name="email" id="create__email" placeholder="Email" ng-model="user.createData.mail" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.email.$touched && !createForm.$submitted || createForm.email.$valid">The email address</p><ng-messages class="error" ng-if="createForm.email.$invalid && createForm.email.$touched || createForm.$submitted" for="createForm.email.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-email"></ng-messages-include></ng-messages></div></div><div class="form-group"><label for="create__password">Password</label><input type="password" class="form-control" name="password" id="create__password" placeholder="Password" ng-model="user.createData.pass" required><div class="help-block"><p class="description" ng-if="!createForm.password.$touched && !createForm.$submitted || createForm.password.$valid">The plain text unencrypted password</p><ng-messages class="error" ng-if="createForm.password.$invalid && createForm.password.$touched || createForm.$submitted" for="createForm.password.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group"><label class="control-label" for="create__status">Status</label><label class="radio-inline"><input type="radio" name="create__status" id="blocked" ng-model="user.createData.status" value="0"> blocked</label><label class="radio-inline"><input type="radio" name="create__status" id="active" ng-model="user.createData.status" value="1"> active</label><div class="help-block"><p class="description">Value 0 for blocked, otherwise will be active by default</p></div></div><div class="form-group"><label class="control-label" for="create__notify">Notify</label><label class="radio-inline"><input type="radio" name="create__notify" id="notification" ng-model="user.createData.notify" value="0"> no user notification</label><label class="radio-inline"><input type="radio" name="create__notify" id="no_notification" ng-model="user.createData.notify" value="1"> user notification</label><div class="help-block"><p class="description">Value 1 to notify user of new account, will not notify by default</p></div></div><div class="form-group"><label ng-click="user.createRolesColapsed = !user.createRolesColapsed">Roles (optional) <span class="caret" ng-class="{true:\'down\',false:\'up\'}[user.createRolesColapsed]"></span></label></div><div class="well collapse" ng-class="!user.createRolesColapsed && \'in\'"><div class="form-group"><div class="checkbox disabled"><label><input type="checkbox" name="create__role__anonymous_user" disabled="disabled"> anonymous user (not available)</label></div><div class="checkbox disabled"><label><input type="checkbox" name="create__role__authenticated_user" disabled="disabled"> authenticated user (not available)</label></div><div class="checkbox"><label><input type="checkbox" name="create__role__administrator" ng-model="user.createData.roles.administrator" ng-true-value="\'3\'"> administrator</label></div><div class="checkbox"><label><input type="checkbox" name="create__role__editor" ng-model="user.createData.roles.editor" ng-true-value="\'4\'"> editor (custom created role)</label></div></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': createForm.field_nickname.$touched && createForm.field_nickname.$invalid || createForm.field_nickname.$invalid && createForm.$submitted}"><label for="create__field_nickname">Nickname</label><input type="field_nickname" class="form-control" name="field_nickname" id="create__field_nickname" placeholder="Nickname" ng-model="user.createData.field_nickname" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!createForm.field_nickname.$touched && !createForm.$submitted || createForm.field_nickname.$valid">The user\'s nickname. ( Custom field. Needs to be <a target="_blank" href="https://www.drupal.org/node/1354202">formated properly</a>. )</p><ng-messages class="error" ng-if="createForm.field_nickname.$invalid && createForm.field_nickname.$touched || createForm.$submitted" for="createForm.field_nickname.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="user.doCreate(createForm)">create request</button></form>'),
e.put("app/components/user/templates/delete.html",'<h2>Delete request</h2><accordion close-others="oneAtATime"><accordion-group heading="Delete Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in user.deleteRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="deleteForm" novalidate><div class="form-errors"><div class="alert alert-danger fade in" ng-repeat="serverError in user.deleteErrors.errors.server_errors">{{serverError}}</div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': deleteForm.uid.$touched && deleteForm.uid.$invalid || deleteForm.uid.$invalid && deleteForm.$submitted}"><label for="delete__uid">Uid</label><input type="number" class="form-control" id="delete__uid" name="uid" placeholder="Uid" ng-model="user.deleteData.uid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!deleteForm.uid.$touched && !deleteForm.$submitted || deleteForm.uid.$valid">UID of the user to be deleted</p><ng-messages class="error" ng-if="deleteForm.uid.$invalid && deleteForm.uid.$touched || deleteForm.$submitted" for="deleteForm.uid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="user.doDelete(deleteForm)">delete request</button></form>'),e.put("app/components/user/templates/index.html",'<h2>Index request</h2><accordion close-others="oneAtATime"><accordion-group heading="Index Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in user.indexRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="indexForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': indexForm.page.$touched && indexForm.page.$invalid || indexForm.page.$invalid && indexForm.$submitted}"><label for="index__page">Page</label><input type="number" class="form-control" id="index__page" name="page" placeholder="Page" ng-model="user.indexData.page"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!indexForm.page.$touched && !indexForm.$submitted || indexForm.page.$valid">Number of items to display on one page</p><ng-messages class="error" ng-if="indexForm.page.$invalid && indexForm.page.$touched || indexForm.$submitted" for="indexForm.page.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': indexForm.pagesize.$touched && indexForm.pagesize.$invalid || indexForm.pagesize.$invalid && indexForm.$submitted}"><label for="index__pagesize">Pagesize</label><input type="number" class="form-control" id="index__pagesize" name="pagesize" placeholder="Pagesize" ng-model="user.indexData.pagesize"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!indexForm.pagesize.$touched && !indexForm.$submitted || indexForm.pagesize.$valid">Number of items to display on one page. (Anonymous user are limited to 25)</p><ng-messages class="error" ng-if="indexForm.pagesize.$invalid && indexForm.pagesize.$touched || indexForm.$submitted" for="indexForm.pagesize.$error"><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group"><label ng-click="user.indexFieldsColapsed = !user.indexFieldsColapsed">Fields <span class="caret" ng-class="{true:\'down\',false:\'up\'}[user.indexFieldsColapsed]"></span></label><div class="help-block"><p class="description">Define the fields to fetched.</p></div></div><div class="well collapse" ng-class="!user.indexFieldsColapsed && \'in\'"><div class="checkbox"><label><input type="checkbox" ng-model="user.indexData.fields.uid"> fields.uid</label></div><div class="checkbox"><label><input type="checkbox" ng-model="user.indexData.fields.name"> fields.name</label></div><div class="checkbox"><label><input type="checkbox" ng-model="user.indexData.fields.mail"> fields.mail</label></div><div class="checkbox"><label><input type="checkbox" ng-model="user.indexData.fields.theme"> fields.theme</label></div><div class="checkbox"><label><input type="checkbox" ng-model="user.indexData.fields.signature"> fields.signature</label></div><div class="checkbox"><label><input type="checkbox" ng-model="user.indexData.fields.signature_format"> fields.signature_format</label></div><div class="checkbox"><label><input type="checkbox" ng-model="user.indexData.fields.created"> fields.created</label></div><div class="checkbox"><label><input type="checkbox" ng-model="user.indexData.fields.access"> fields.access</label></div><div class="checkbox"><label><input type="checkbox" ng-model="user.indexData.fields.login"> fields.login</label></div><div class="checkbox"><label><input type="checkbox" ng-model="user.indexData.fields.status"> fields.status</label></div><div class="checkbox"><label><input type="checkbox" ng-model="user.indexData.fields.timezone"> fields.timezone</label></div><div class="checkbox"><label><input type="checkbox" ng-model="user.indexData.fields.language"> fields.language</label></div><div class="checkbox"><label><input type="checkbox" ng-model="user.indexData.fields.picture"> fields.picture</label></div><div class="checkbox"><label><input type="checkbox" ng-model="user.indexData.fields.init"> fields.init</label></div><div class="checkbox"><label><input type="checkbox" ng-model="user.indexData.fields.data"> fields.data</label></div></div><div class="form-group"><label ng-click="user.indexParametersColapsed = !user.indexParametersColapsed">Parameters <span class="caret" ng-class="{true:\'down\',false:\'up\'}[user.indexParametersColapsed]"></span></label><div class="help-block"><p class="description">Filter by field value.</p></div></div><div class="well collapse" ng-class="!user.indexParametersColapsed && \'in\'"><div class="form-group"><label for="index__parameters_uid">Parameter uid</label><input type="number" class="form-control" id="index__parameters_uid" placeholder="Uid" ng-model="user.indexData.parameters.uid"></div><div class="form-group"><label for="index__parameters_name">Parameter name</label><input type="text" class="form-control" id="index__parameters_name" placeholder="Username" ng-model="user.indexData.parameters.name"></div><div class="form-group"><label for="index__parameters_mail">Parameter mail</label><input type="text" class="form-control" id="index__parameters_mail" placeholder="EMail" ng-model="user.indexData.parameters.mail"></div><div class="form-group"><label for="index__parameters_theme">Parameter theme</label><input type="text" class="form-control" id="index__parameters_theme" placeholder="Theme" ng-model="user.indexData.parameters.theme"></div><div class="form-group"><label for="index__parameters_signature">Parameter signature</label><input type="text" class="form-control" id="index__parameters_signature" placeholder="Signature" ng-model="user.indexData.parameters.signature"></div><div class="form-group"><label for="index__parameters_signature_format">Parameter signature_format</label><input type="text" class="form-control" id="index__parameters_signature_format" placeholder="Signature Format" ng-model="user.indexData.parameters.signature_format"></div><div class="form-group"><label for="index__parameters_created">Parameter created</label><input type="text" class="form-control" id="index__parameters_created" placeholder="Created" ng-model="user.indexData.parameters.created"></div><div class="form-group"><label for="index__parameters_access">Parameter access</label><input type="text" class="form-control" id="index__parameters_access" placeholder="Access" ng-model="user.indexData.parameters.access"></div><div class="form-group"><label for="index__parameters_login">Parameter login</label><input type="text" class="form-control" id="index__parameters_login" placeholder="Login" ng-model="user.indexData.parameters.login"></div><div class="form-group"><label for="index__parameters_status">Parameter status</label><input type="text" class="form-control" id="index__parameters_status" placeholder="Status" ng-model="user.indexData.parameters.status"></div><div class="form-group"><label for="index__parameters_timezone">Parameter timezone</label><input type="text" class="form-control" id="index__parameters_timezone" placeholder="Timezone" ng-model="user.indexData.parameters.timezone"></div><div class="form-group"><label for="index__parameters_language">Parameter language</label><input type="text" class="form-control" id="index__parameters_language" placeholder="Language" ng-model="user.indexData.parameters.language"></div><div class="form-group"><label for="index__parameters_picture">Parameter picture</label><input type="text" class="form-control" id="index__parameters_picture" placeholder="Picture" ng-model="user.indexData.parameters.picture"></div><div class="form-group"><label for="index__parameters_init">Parameter init</label><input type="text" class="form-control" id="index__parameters_init" placeholder="Init" ng-model="user.indexData.parameters.init"></div><div class="form-group"><label for="index__parameters_data">Parameter data</label><input type="text" class="form-control" id="index__parameters_data" placeholder="Data" ng-model="user.indexData.parameters.data"></div></div><button class="btn btn-success" ng-click="user.doIndex(indexForm)">index request</button></form>'),e.put("app/components/user/templates/login.html",'<h2>Login request</h2><accordion close-others="oneAtATime"><accordion-group heading="Login Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in user.loginRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="loginForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': loginForm.username.$touched && loginForm.username.$invalid || loginForm.username.$invalid && loginForm.$submitted}"><label for="login__username">Username</label><input type="text" class="form-control" name="username" id="login__username" placeholder="Name" ng-model="user.loginData.username" ng-maxlength="60" maxlength="61" required><form-control-feedback></form-control-feedback><div class="help-block"><p ng-if="!loginForm.username.$touched && !loginForm.$submitted || loginForm.username.$valid">The user name</p><ng-messages ng-if="loginForm.username.$invalid && loginForm.username.$touched || loginForm.$submitted" for="loginForm.username.$error"><ng-messages-include src="error-required"></ng-messages-include><div ng-message="maxlength">Your username must be less than 61 characters long</div></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': loginForm.password.$touched && loginForm.password.$invalid || loginForm.password.$invalid && loginForm.$submitted}"><label for="login__password">Password</label><input type="password" class="form-control" name="password" id="login__password" placeholder="Password" ng-model="user.loginData.password" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!loginForm.password.$touched && !loginForm.$submitted || loginForm.password.$valid">The plain text unencrypted password</p><ng-messages class="error" ng-if="loginForm.password.$invalid && loginForm.password.$touched || loginForm.$submitted" for="loginForm.password.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="user.doLogin(loginForm)">login request</button></form>'),e.put("app/components/user/templates/logout.html",'<h2>Logout request</h2><accordion close-others="oneAtATime"><accordion-group heading="Logout Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in user.logoutRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="logoutForm" novalidate><button class="btn btn-success" ng-click="user.doLogout(logoutForm)">logout request</button></form>'),e.put("app/components/user/templates/passwordReset.html",'<h2>PasswordReset request</h2><accordion close-others="oneAtATime"><accordion-group heading="PasswordReset Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in user.passwordResetRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="passwordResetForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': passwordResetForm.uid.$touched && passwordResetForm.uid.$invalid || passwordResetForm.uid.$invalid && passwordResetForm.$submitted}"><label for="passwordReset__uid">Uid</label><input type="number" class="form-control" id="passwordReset__uid" name="uid" placeholder="Uid" ng-model="user.passwordResetData.uid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!passwordResetForm.uid.$touched && !passwordResetForm.$submitted || passwordResetForm.uid.$valid">UID of the user to reset password</p><ng-messages class="error" ng-if="passwordResetForm.uid.$invalid && passwordResetForm.uid.$touched || passwordResetForm.$submitted" for="passwordResetForm.uid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="user.doPasswordReset(passwordResetForm)">resend welcome email request</button></form>'),e.put("app/components/user/templates/register.html",'<h2>Register request</h2><accordion close-others="oneAtATime"><accordion-group heading="Register Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in user.registerRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="registerForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': registerForm.username.$touched && registerForm.username.$invalid || registerForm.username.$invalid && registerForm.$submitted}"><label for="register__name">Username</label><input type="text" class="form-control" name="username" id="register__username" placeholder="Username" ng-model="user.registerData.username" ng-maxlength="60" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!registerForm.username.$touched && !registerForm.$submitted || registerForm.username.$valid">The user name</p><ng-messages class="error" ng-if="registerForm.username.$invalid && registerForm.username.$touched || registerForm.$submitted" for="registerForm.username.$error"><ng-messages-include src="error-required"></ng-messages-include><div ng-message="maxlength">Your username must be less than 61 characters long</div></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': registerForm.email.$touched && registerForm.email.$invalid || registerForm.email.$invalid && registerForm.$submitted}"><label for="register__email">Email</label><input type="email" class="form-control" name="email" id="register__email" placeholder="Email" ng-model="user.registerData.mail" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!registerForm.email.$touched && !registerForm.$submitted || registerForm.email.$valid">The email address</p><ng-messages class="error" ng-if="registerForm.email.$invalid && registerForm.email.$touched || registerForm.$submitted" for="registerForm.email.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-email"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': registerForm.pass.$touched && registerForm.pass.$invalid || registerForm.pass.$invalid && registerForm.$submitted}"><label for="register__pass">Password</label><input type="password" class="form-control" name="pass" id="register__pass" placeholder="Password" ng-model="user.registerData.pass" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!registerForm.pass.$touched && !registerForm.$submitted || registerForm.pass.$valid">The plain text unencrypted password</p><ng-messages class="error" ng-if="registerForm.pass.$invalid && registerForm.pass.$touched || registerForm.$submitted" for="registerForm.pass.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="user.doRegister(registerForm)">register request</button></form>'),e.put("app/components/user/templates/resendWelcomeEmail.html",'<h2>Resend Welcome Email request</h2><accordion close-others="oneAtATime"><accordion-group heading="Resend Welcome Email Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in user.resendWelcomeEmailRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="resendWelcomeEmailForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': resendWelcomeEmailForm.uid.$touched && resendWelcomeEmailForm.uid.$invalid || resendWelcomeEmailForm.uid.$invalid && resendWelcomeEmailForm.$submitted}"><label for="resendWelcomeEmail__uid">Uid</label><input type="number" class="form-control" id="resendWelcomeEmail__uid" name="uid" placeholder="Uid" ng-model="user.resendWelcomeEmailData.uid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!resendWelcomeEmailForm.uid.$touched && !resendWelcomeEmailForm.$submitted || resendWelcomeEmailForm.uid.$valid">UID of the user to resend the welcome email</p><ng-messages class="error" ng-if="resendWelcomeEmailForm.uid.$invalid && resendWelcomeEmailForm.uid.$touched || resendWelcomeEmailForm.$submitted" for="resendWelcomeEmailForm.uid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="user.doResendWelcomeEmail(resendWelcomeEmailForm)">resend welcome email request</button></form>'),e.put("app/components/user/templates/retrieve.html",'<h2>Retrieve request</h2><p>Get user details.<br>see <code>services/resources/user_resource.inc => _user_resource_retrieve()</code></p><accordion close-others="oneAtATime"><accordion-group heading="Retrieve Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in user.retrieveRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="retrieveForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': retrieveForm.uid.$touched && retrieveForm.uid.$invalid || retrieveForm.uid.$invalid && retrieveForm.$submitted }"><label for="retrieve__uid">Uid</label><input type="number" class="form-control" id="retrieve__uid" name="uid" placeholder="Uid" ng-model="user.retrieveData.uid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!retrieveForm.uid.$touched && !retrieveForm.$submitted || retrieveForm.uid.$valid">UID of the user to be loaded</p><ng-messages class="error" ng-if="retrieveForm.uid.$invalid && retrieveForm.uid.$touched || retrieveForm.$submitted" for="retrieveForm.uid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="user.doRetrieve(retrieveForm)">retrieve request</button></form>'),e.put("app/components/user/templates/token.html",'<h2>Token request</h2><accordion close-others="oneAtATime"><accordion-group heading="Token Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in user.tokenRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="tokenForm" novalidate><button class="btn btn-success" ng-click="user.doToken(tokenForm)">token request</button></form>'),e.put("app/components/user/templates/update.html",'<h2>Update request</h2><accordion close-others="oneAtATime"><accordion-group heading="Update Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in user.updateRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="updateForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.uid.$touched && updateForm.uid.$invalid || updateForm.uid.$invalid && updateForm.$submitted}"><label for="update__uid">Uid</label><input type="number" class="form-control" id="update__uid" name="uid" placeholder="Uid" ng-model="user.updateData.uid" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.uid.$touched && !updateForm.$submitted || updateForm.uid.$valid">UID of the user to be loaded</p><ng-messages class="error" ng-if="updateForm.uid.$invalid && updateForm.uid.$touched || updateForm.$submitted" for="updateForm.uid.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-number"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.name.$touched && updateForm.name.$invalid || updateForm.name.$invalid && updateForm.$submitted}"><label for="update__name">Name</label><input type="text" class="form-control" name="name" id="update__name" placeholder="Name" ng-model="user.updateData.name" ng-maxlength="60" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.name.$touched && !updateForm.$submitted || updateForm.name.$valid">The user name</p><ng-messages class="error" ng-if="updateForm.name.$invalid && updateForm.name.$touched || updateForm.$submitted" for="updateForm.name.$error"><ng-messages-include src="error-required"></ng-messages-include><div ng-message="maxlength">Your username must be less than 61 characters long</div></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.email.$touched && updateForm.email.$invalid || updateForm.email.$invalid && updateForm.$submitted}"><label for="update__email">Email</label><input type="email" class="form-control" name="email" id="update__email" placeholder="Email" ng-model="user.updateData.mail" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.email.$touched && !updateForm.$submitted || updateForm.email.$valid">The email address</p><ng-messages class="error" ng-if="updateForm.email.$invalid && updateForm.email.$touched || updateForm.$submitted" for="updateForm.email.$error"><ng-messages-include src="error-required"></ng-messages-include><ng-messages-include src="error-email"></ng-messages-include></ng-messages></div></div><div class="form-group"><label class="control-label" for="update__status">Status</label><label class="radio-inline"><input type="radio" name="update__status" id="blocked" ng-model="user.updateData.status" value="0"> blocked</label><label class="radio-inline"><input type="radio" name="update__status" id="active" ng-model="user.updateData.status" value="1"> active</label><div class="help-block"><div>Value 0 for blocked, otherwise will be active by default</div></div></div><div class="form-group"><label class="control-label" for="update__notify">Notify</label><label class="radio-inline"><input type="radio" name="update__notify" id="notification" ng-model="user.updateData.notify" value="0"> no user notification</label><label class="radio-inline"><input type="radio" name="update__notify" id="no_notification" ng-model="user.updateData.notify" value="1"> user notification</label><div class="help-block"><div>Value 1 to notify user of new account, will not notify by default</div></div></div><div class="form-group"><label ng-click="user.updateRolesColapsed = !user.updateRolesColapsed">Roles (optional) <span class="caret" ng-class="{true:\'down\',false:\'up\'}[user.updateRolesColapsed]"></span></label></div><div class="well collapse" ng-class="!user.updateRolesColapsed && \'in\'"><div class="form-group"><div class="checkbox disabled"><label><input type="checkbox" name="update__role__anonymous_user" disabled="disabled"> anonymous user (not available)</label></div><div class="checkbox disabled"><label><input type="checkbox" name="update__role__authenticated_user" disabled="disabled"> authenticated user (not available)</label></div><div class="checkbox"><label><input type="checkbox" name="update__role__administrator" ng-model="user.updateData.roles.administrator" ng-true-value="\'3\'"> administrator</label></div><div class="checkbox"><label><input type="checkbox" name="update__role__editor" ng-model="user.updateData.roles.editor" ng-true-value="\'4\'"> editor (custom updated role)</label></div></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': updateForm.field_nickname.$touched && updateForm.field_nickname.$invalid || updateForm.field_nickname.$invalid && updateForm.$submitted}"><label for="update__field_nickname">Nickname</label><input type="field_nickname" class="form-control" name="field_nickname" id="update__field_nickname" placeholder="Nickname" ng-model="user.updateData.field_nickname" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!updateForm.field_nickname.$touched && !updateForm.$submitted || updateForm.field_nickname.$valid">The user\'s nickname. ( Custom created field. Needs to be <a target="_blank" href="https://www.drupal.org/node/1354202">formated properly</a>. )</p><ng-messages class="error" ng-if="updateForm.field_nickname.$invalid && updateForm.field_nickname.$touched || updateForm.$submitted" for="updateForm.field_nickname.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><button class="btn btn-success" ng-click="user.doUpdate(updateForm)">update request</button></form>'),e.put("app/components/views/templates/retrieve.html",'<h2>Retrieve request</h2><p>Returns the details of currently logged in views.<br>object with session id, session name and a views object.<br>See <code>services/resources/views_resource.inc</code></p><hr><accordion close-others="oneAtATime"><accordion-group heading="Retrieve Request {{key}} at {{request.requestStart | date:\'HH:mm:ss\'}}" ng-repeat="(key,request) in views.retrieveRequests"><ng-include src="\'app/templates/request/request.html\'"></ng-include></accordion-group></accordion><form name="retrieveForm" novalidate><div class="form-group" ng-class="{ \'has-error has-feedback\': retrieveForm.view_name.$touched && retrieveForm.view_name.$invalid || retrieveForm.view_name.$invalid && retrieveForm.$submitted }"><label for="retrieve__view_name">View Name</label><input type="text" class="form-control" id="retrieve__view_name" name="view_name" placeholder="View Name" ng-model="views.retrieveData.view_name" required><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!retrieveForm.view_name.$touched && !retrieveForm.$submitted || retrieveForm.view_name.$valid">Name of the view to loaded</p><ng-messages class="error" ng-if="retrieveForm.view_name.$invalid && retrieveForm.view_name.$touched || retrieveForm.$submitted" for="retrieveForm.view_name.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': retrieveForm.display_id.$touched && retrieveForm.display_id.$invalid || retrieveForm.display_id.$invalid && retrieveForm.$submitted }"><label for="retrieve__display_id">Display Id</label><input type="text" class="form-control" id="retrieve__display_id" name="display_id" placeholder="Display Id" ng-model="views.retrieveData.display_id"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!retrieveForm.display_id.$touched && !retrieveForm.$submitted || retrieveForm.display_id.$valid">Display Id of the view to loaded. You can find this under Views Administration -> Advanced -> Other -> Machine Name: "display_id"</p><ng-messages class="error" ng-if="retrieveForm.display_id.$invalid && retrieveForm.display_id.$touched || retrieveForm.$submitted" for="retrieveForm.display_id.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': retrieveForm.args.$touched && retrieveForm.args.$invalid || retrieveForm.args.$invalid && retrieveForm.$submitted }"><label for="retrieve__args">Args</label><input type="text" class="form-control" id="retrieve__args" name="args" placeholder="Args" ng-model="views.retrieveData.args"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!retrieveForm.args.$touched && !retrieveForm.$submitted || retrieveForm.args.$valid">Args to pass to view</p><ng-messages class="error" ng-if="retrieveForm.args.$invalid && retrieveForm.args.$touched || retrieveForm.$submitted" for="retrieveForm.args.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': retrieveForm.offset.$touched && retrieveForm.offset.$invalid || retrieveForm.offset.$invalid && retrieveForm.$submitted }"><label for="retrieve__offset">Offset</label><input type="number" class="form-control" id="retrieve__offset" name="offset" placeholder="Offset" ng-model="views.retrieveData.offset"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!retrieveForm.offset.$touched && !retrieveForm.$submitted || retrieveForm.offset.$valid">Offset of the views records</p><ng-messages class="error" ng-if="retrieveForm.offset.$invalid && retrieveForm.offset.$touched || retrieveForm.$submitted" for="retrieveForm.offset.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': retrieveForm.limit.$touched && retrieveForm.limit.$invalid || retrieveForm.limit.$invalid && retrieveForm.$submitted }"><label for="retrieve__limit">Limit</label><input type="number" class="form-control" id="retrieve__limit" name="limit" placeholder="Limit" ng-model="views.retrieveData.limit"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!retrieveForm.limit.$touched && !retrieveForm.$submitted || retrieveForm.limit.$valid">Limit of the views records</p><ng-messages class="error" ng-if="retrieveForm.limit.$invalid && retrieveForm.limit.$touched || retrieveForm.$submitted" for="retrieveForm.limit.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="checkbox"><label><input type="checkbox" ng-model="views.retrieveData.format_output"> format_output</label><div class="help-block"><p class="description">To format the output as html or not</p></div></div><label ng-click="views.exposed_sortsCollapsed = !views.exposed_sortsCollapsed">Exposed sorts <span class="caret" ng-class="{true:\'down\',false:\'up\'}[views.exposed_sortsCollapsed]"></span></label><div class="help-block"><p>The sort criteria have to be set to exposed in the view</p></div><div class="well collapse" ng-class="!views.exposed_sortsCollapsed && \'in\'"><div class="form-group" ng-class="{ \'has-error has-feedback\': retrieveForm.exposed_sorts.sort_order.$touched && retrieveForm.exposed_sorts.sort_order.$invalid || retrieveForm.exposed_sorts.sort_order.$invalid && retrieveForm.$submitted }"><label for="retrieve__exposed_sorts.sort_order">Sort Order:</label><br><label class="radio-inline" ng-repeat="(sortName, value) in views.sorts"><input type="radio" name="sort_order" id="retrieve__exposed_sorts_sort_order_{{sortName}}" ng-model="views.retrieveData.exposed_sorts.sort_order" value="{{value}}"> {{value}}</label><div class="help-block"><p class="description">The sort order</p></div></div><div class="form-group" ng-class="{ \'has-error has-feedback\': retrieveForm.exposed_sorts.sort_by.$touched && retrieveForm.exposed_sorts.sort_by.$invalid || retrieveForm.exposed_sorts.sort_by.$invalid && retrieveForm.$submitted }"><label for="retrieve__exposed_sorts.sort_by">Sort By</label><input type="text" class="form-control" id="retrieve__exposed_sort_sort_by" name="Sort Order" placeholder="Sort By" ng-model="views.retrieveData.exposed_sorts.sort_by"><div class="help-block"><p class="description" ng-if="!retrieveForm.exposed_sorts.sort_by.$touched && !retrieveForm.$submitted || retrieveForm.exposed_sorts.sort_by.$valid">The field name to sort by</p></div></div></div><label ng-click="views.exposed_filtersCollapsed = !views.exposed_filtersCollapsed">Exposed filters <span class="caret" ng-class="{true:\'down\',false:\'up\'}[views.exposed_filtersCollapsed]"></span></label><div class="help-block"><p>The filters criteria have to be set to exposed in the view</p></div><div class="well collapse" ng-class="!views.exposed_filtersCollapsed && \'in\'"><div class="form-group" ng-class="{ \'has-error has-feedback\': retrieveForm.nid.$touched && retrieveForm.nid.$invalid || retrieveForm.nid.$invalid && retrieveForm.$submitted }"><label for="retrieve__nid">Nid</label><input type="number" class="form-control" id="retrieve__nid" name="nid" placeholder="Nid" ng-model="views.retrieveData.exposed_filters.nid"><form-control-feedback></form-control-feedback><div class="help-block"><p class="description" ng-if="!retrieveForm.nid.$touched && !retrieveForm.$submitted || retrieveForm.nid.$valid">Nid in views records (The field is set to exposed in the view)</p><ng-messages class="error" ng-if="retrieveForm.nid.$invalid && retrieveForm.nid.$touched || retrieveForm.$submitted" for="retrieveForm.nid.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group"><label for="retrieve__exposed_sorts.sort_order">Comment count operators (The field and operators are set to exposed in the view)</label><br><div class="radio" ng-repeat="(filterName, value)  in views.filters"><label><input type="radio" name="{{filterName}}" id="retrieve__exposed_filters__{{filterName}}" ng-model="views.retrieveData.exposed_filters.comment_count_op" value="{{value}}"> {{filterName}}</label></div><div class="help-block"><p class="description">The comment count operators</p></div></div><div class="form-group" ng-if="views.retrieveData.exposed_filters.comment_count_op !== \'between\' && views.retrieveData.exposed_filters.comment_count_op !== \'not+between\' && views.retrieveData.exposed_filters.comment_count_op !== \'regular_expression\'" ng-class="{ \'has-error has-feedback\': retrieveForm.exposed_filters.comment_count.$touched && retrieveForm.exposed_filters.comment_count.$invalid || retrieveForm.exposed_filters.comment_count.$invalid && retrieveForm.$submitted }"><label for="retrieve__exposed_filters.comment_count">Comment count value</label><input type="number" class="form-control" id="retrieve__exposed_filters_comment_count_value" name="Comment count value" placeholder="Comment count value" ng-model="views.retrieveData.exposed_filters.comment_count.value"><div class="help-block"><p class="description">Comment count of node in views records</p></div></div><div class="form-group" ng-if="views.retrieveData.exposed_filters.comment_count_op === \'between\' || views.retrieveData.exposed_filters.comment_count_op === \'not+between\'" ng-class="{ \'has-error has-feedback\': retrieveForm.exposed_filters.comment_count.min.$touched && retrieveForm.exposed_filters.comment_count.min.$invalid || retrieveForm.exposed_filters.comment_count.min.$invalid && retrieveForm.$submitted }"><label for="retrieve__exposed_filters.comment_count_min">Comment count min</label><input type="number" class="form-control" id="retrieve__exposed_filters_comment_count_min" name="Comment count min" placeholder="Comment count min" ng-model="views.retrieveData.exposed_filters.comment_count.min"><div class="help-block"><p class="description" ng-if="!retrieveForm.exposed_filters.comment_count.min.$touched && !retrieveForm.$submitted || retrieveForm.exposed_filters.comment_count.min.$valid">Comment count of node in views records</p><ng-messages class="error" ng-if="retrieveForm.exposed_filters.comment_count.min.$invalid && retrieveForm.exposed_filters.comment_count.min.$touched || retrieveForm.$submitted" for="retrieveForm.exposed_filters.comment_count.min.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-if="views.retrieveData.exposed_filters.comment_count_op === \'between\' || views.retrieveData.exposed_filters.comment_count_op === \'not+between\'" ng-class="{ \'has-error has-feedback\': retrieveForm.exposed_filters.comment_count.max.$touched && retrieveForm.exposed_filters.comment_count.max.$invalid || retrieveForm.exposed_filters.comment_count.max.$invalid && retrieveForm.$submitted }"><label for="retrieve__exposed_filters.comment_count_max">Comment count max</label><input type="number" class="form-control" id="retrieve__exposed_filters_comment_count.max" name="Comment count max" placeholder="Comment count max" ng-model="views.retrieveData.exposed_filters.comment_count.max"><div class="help-block"><p class="description" ng-if="!retrieveForm.exposed_filters.comment_count.max.$touched && !retrieveForm.$submitted || retrieveForm.exposed_filters.comment_count.max.$valid">Comment count of node in views records</p><ng-messages class="error" ng-if="retrieveForm.exposed_filters.comment_count.max.$invalid && retrieveForm.exposed_filters.comment_count.max.$touched || retrieveForm.$submitted" for="retrieveForm.exposed_filters.comment_count.max.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div><div class="form-group" ng-if="views.retrieveData.exposed_filters.comment_count_op === \'regular_expression\'" ng-class="{ \'has-error has-feedback\': retrieveForm.exposed_filters.comment_count.regular_expression.$touched && retrieveForm.exposed_filters.comment_count.regular_expression.$invalid || retrieveForm.exposed_filters.comment_count.regular_expression.$invalid && retrieveForm.$submitted }"><label for="retrieve__exposed_filters.comment_count_regular_expression">Comment count regular_expression</label><input type="text" class="form-control" id="retrieve__exposed_filters_comment_count.regular_expression" name="Comment count regular_expression" placeholder="Comment count regular_expression" ng-model="views.retrieveData.exposed_filters.comment_count.regular_expression"><div class="help-block"><p class="description" ng-if="!retrieveForm.exposed_filters.comment_count.regular_expression.$touched && !retrieveForm.$submitted || retrieveForm.exposed_filters.comment_count.regular_expression.$valid">Comment count of node in views records</p><ng-messages class="error" ng-if="retrieveForm.exposed_filters.comment_count.regular_expression.$invalid && retrieveForm.exposed_filters.comment_count.regular_expression.$touched || retrieveForm.$submitted" for="retrieveForm.exposed_filters.comment_count.regular_expression.$error"><ng-messages-include src="error-required"></ng-messages-include></ng-messages></div></div></div><button class="btn btn-success" ng-click="views.doRetrieve(retrieveForm)">retrieve request</button></form>');

}]);
!function(){"use strict";function e(){return{restrict:"E",replace:!0,require:"^form",template:'<span class="glyphicon glyphicon-remove form-control-feedback"></span>',link:function(e,n,r,c){var o=n.parent().find("input"),t=o.attr("name"),a=o.css("display");e.$watch(c.$name+"."+t+".$valid",function(e){e?n.css("display","none"):n.css("display",a)})}}}angular.module("commons.directives.formControlFeedback",[]).directive("formControlFeedback",e)}();
!function(){"use strict";function n(n,a,o){var e='<div class="navbar-right"><form toggle-by-accesslevel="{{accessLevels.anon}}" class="navbar-form navbar-right" name="navbarLoginForm" id="navbar-login" novalidate><div class="form-group" ng-class="{ \'has-error\' : navbarLoginForm.username.$touched && navbarLoginForm.username.$invalid || navbarLoginForm.username.$invalid && navbarLoginForm.$submitted}"><input type="text" class="form-control" name="username" id="navbarLogin__username" placeholder="Username" ng-model="ngModel.navbarLoginData.username" ng-maxlength="60" required></div> <div class="form-group" ng-class="{ \'has-error\': navbarLoginForm.password.$touched && navbarLoginForm.password.$invalid || navbarLoginForm.password.$invalid && navbarLoginForm.$submitted}"><input type="password" class="form-control" name="password" id="navbarLogin__password" placeholder="Password" ng-model="ngModel.navbarLoginData.password" required></div> <button class="btn btn-primary" ng-click="doLogin(navbarLoginForm)">Login</button></form><ul id="navbar-user" class="nav navbar-nav"  toggle-by-accesslevel="{{accessLevels.user}}"><li class="dropdown" dropdown><a href="#" dropdown-toggle><span class="glyphicon glyphicon-user"></span> {{username}} <b class="caret"></b></a><ul class="dropdown-menu"><li class="divider"></li><li><a href="#" ng-click="doLogout()"><span class="glyphicon glyphicon-off"> </span>Logout</a></li></ul></li></ul></div>';return{restrict:"E",replace:!0,template:e,link:function(e,r,s,i){function t(a){a.$valid&&n.login(e.ngModel.navbarLoginData).then(function(n){e.ngModel.navbarLoginData={},a.$setPristine(),a.$setUntouched()})}function c(){n.logout()}function l(n){e.username=n.name}e.accessLevels=o.accessLevels,e.doLogin=t,e.doLogout=c,a.subCurrentUserUpdated(e,l)}}}angular.module("commons.directives.navbarLogin",["d7-services.commons.authentication.service","d7-services.commons.authentication.channel","d7-services.commons.authentication.serviceConstant"]).directive("navbarLogin",n),n.$inject=["AuthenticationService","AuthenticationChannel","AuthenticationServiceConstant"]}();
!function(){"use strict";function n(){return function(n,t){return angular.isUndefined(n)||null===n||""===n?t:n}}angular.module("commons.filters.ifEmpty",[]).filter("ifEmpty",n)}();
!function(){"use strict";function e(e,t,n){var s=this;s.navCollapsed=!0,s.$state=e,s.accessLevels=n.accessLevels,t.refreshConnection()}angular.module("ngDrupalServicesTests.app.controller",["commons.directives.navbarLogin"]).controller("AppController",e),e.$inject=["$state","AuthenticationService","AuthenticationServiceConstant"]}();
!function(){"use strict";function e(e){}angular.module("ngDrupalServicesTests.home.controller",[]).controller("HomeController",e),e.$inject=["$scope"]}();
!function(){"use strict";function o(){var o=this;o.descriptionColapsed=!0}angular.module("ngDrupalServicesTests.commons.controller",[]).controller("CommonsController",o)}();
!function(){"use strict";function r(){var r=this;r.descriptionColapsed=!0}angular.module("ngDrupalServicesTests.services_3x.controller",["ui.router"]).controller("Services_3xController",r)}();
!function(){"use strict";function e(){var e=this;e.descriptionColapsed=!0}angular.module("ngDrupalServicesTests.services_views.controller",["ui.router"]).controller("Services_ViewsController",e)}();
!function(){"use strict";function e(e,t,o,n,s){function i(e){p.isAuthorizedData.selectedAccessLevel=p.accessLevels[e]}function u(e){p.isAuthorizedData.selectedRoles[e]?delete p.isAuthorizedData.selectedRoles[e]:p.isAuthorizedData.selectedRoles[e]=p.roles[e]}function r(e){"level"==e&&(p.isUserAuthorized=t.isAuthorized(p.isAuthorizedData.selectedAccessLevel)),"roles_and_level"==e&&(p.isUserAuthorized=t.isAuthorized(p.isAuthorizedData.selectedAccessLevel,p.isAuthorizedData.selectedRoles))}function c(e){e.$valid&&(S=Date.now(),t.login(p.loginData).then(function(t){p.loginData={},console.log("auth login success",t),e.$setPristine(),e.$setUntouched()},function(e){console.log("auth login error")}))}function a(e){L=Date.now(),console.log("subLoginConfirmed"),p.loginRequests.push({requestStart:S,requestEnd:L,requestDuration:L-S,data:e})}function l(e){L=Date.now(),console.log("subLoginFailed",e),p.loginRequests.push({requestStart:S,requestEnd:L,requestDuration:L-S,data:e})}function d(){S=Date.now(),t.logout(p.logoutData).then(function(e){console.log("auth logout success")},function(e){console.log("auth logout error")})}function h(e){L=Date.now(),console.log("subLogoutConfirmed"),p.logoutRequests.push({requestStart:S,requestEnd:L,requestDuration:L-S,data:e})}function g(e){L=Date.now(),console.log("subLogoutFailed"),p.logoutRequests.push({requestStart:S,requestEnd:L,requestDuration:L-S,data:e})}function f(){S=Date.now(),t.refreshConnection().then(function(e){console.log("auth RefreshConnection success")},function(e){console.log("auth RefreshConnection error")})}function C(e){L=Date.now(),console.log("subRefreshConnectionConfirmedCallback"),p.refreshConnectionRequests.push({requestStart:S,requestEnd:L,requestDuration:L-S,data:e})}function D(e){L=Date.now(),console.log("subRefreshConnectionFailedCallback"),p.refreshConnectionRequests.push({requestStart:S,requestEnd:L,requestDuration:L-S,data:e})}function A(){p.lastConnectionTime=t.getLastConnectTime()}function q(){console.log(t.getConnectionState()),p.currentConnectionState=t.getConnectionState()}function R(e){console.log("subConnectionStateUpdatedCallback"),p.connectionStateChanges.push({timeOfChange:Date.now(),from:p.currentConnectionState,to:e}),p.currentConnectionState=e}function m(){p.currentAuthenticationHeaders=t.getAuthenticationHeaders()}function b(){currentUser=t.getCurrentUser()}function v(e){console.log("subCurrentUserUpdatedCallback"),p.currentUserChanges.push({timeOfChange:Date.now(),from:p.currentUser,to:e}),p.currentUser=e}var L=0,S=0,p=this;p.roles=n.roles,p.accessLevels=n.accessLevels,p.selectedAccessLevel="public",p.rolesOptions={},p.isAuthorizedData={},p.isAuthorizedData.selectedAccessLevel=p.accessLevels["public"],p.isAuthorizedData.selectedRoles={},p.isAuthorizedData.selectedRoles[1]=p.roles[1],angular.forEach(p.roles,function(e,t){p.rolesOptions[t]=p.isAuthorizedData.selectedRoles[t]?!0:!1}),p.isAuthorizedResult,p.updateSelectedAccessLevel=i,p.updateSelectedRoles=u,p.doIsAuthorized=r,p.loginRequests=[],p.loginData={uid:""},p.doLogin=c,o.subLoginConfirmed(e,a),o.subLoginFailed(e,l),p.logoutRequests=[],p.doLogout=d,o.subLogoutConfirmed(e,h),o.subLogoutFailed(e,g),p.refreshConnectionRequests=[],p.doRefreshConnection=f,o.subRefreshConnectionConfirmed(e,C),o.subRefreshConnectionFailed(e,D),p.lastConnectionTime="",p.doGetLastConnectTime=A,p.connectionStateChanges=[],p.currentConnectionState="",p.doGetConnectionState=q,o.subConnectionStateUpdated(e,R),p.currentAuthenticationHeaders="",p.doGetAuthenticationHeaders=m,p.currentUserChanges=[],p.currentUser=t.getCurrentUser(),p.doGetCurrentUser=b,o.subCurrentUserUpdated(e,v)}angular.module("ngDrupalServicesTests.authentication.controller",["d7-services.commons.authentication.service","d7-services.commons.authentication.serviceConstant","d7-services.commons.authentication.channel","commons.filters.ifEmpty"]).controller("AuthenticationController",e),e.$inject=["$scope","AuthenticationService","AuthenticationChannel","AuthenticationServiceConstant","$filter"]}();
!function(){"use strict";function t(t,e){t.state("app.commons.authentication",{url:"/authentication","abstract":!0,views:{authentication:{templateUrl:"./app/components/authentication/authentication.view.html",controller:"AuthenticationController",controllerAs:"authentication"}}}).state("app.commons.authentication.isAuthorized",{url:"/is-authorized",deepStateRedirect:!0,sticky:!0,views:{isAuthorized:{templateUrl:"./app/components/authentication/templates/isAuthorized.html"}}}).state("app.commons.authentication.login",{url:"/login",deepStateRedirect:!0,sticky:!0,views:{login:{templateUrl:"./app/components/authentication/templates/login.html"}}}).state("app.commons.authentication.logout",{url:"/logout",deepStateRedirect:!0,sticky:!0,views:{logout:{templateUrl:"./app/components/authentication/templates/logout.html"}}}).state("app.commons.authentication.getAuthenticationHeaders",{url:"/get-authentication-headers",deepStateRedirect:!0,sticky:!0,views:{getAuthenticationHeaders:{templateUrl:"./app/components/authentication/templates/getAuthenticationHeaders.html"}}}).state("app.commons.authentication.getConnectionState",{url:"/get-connection-state",deepStateRedirect:!0,sticky:!0,views:{getConnectionState:{templateUrl:"./app/components/authentication/templates/getConnectionState.html"}}}).state("app.commons.authentication.getCurrentUser",{url:"/get-current-user",deepStateRedirect:!0,sticky:!0,views:{getCurrentUser:{templateUrl:"./app/components/authentication/templates/getCurrentUser.html"}}}).state("app.commons.authentication.getLastConnectTime",{url:"/get-last-connect-time",deepStateRedirect:!0,sticky:!0,views:{getLastConnectTime:{templateUrl:"./app/components/authentication/templates/getLastConnectTime.html"}}}).state("app.commons.authentication.refreshConnection",{url:"/refresh-connection",deepStateRedirect:!0,sticky:!0,views:{refreshConnection:{templateUrl:"./app/components/authentication/templates/refreshConnection.html"}}})}angular.module("ngDrupalServicesTests.authentication.states",["ui.router","ct.ui.router.extras","ngDrupalServicesTests.authentication.controller"]).config(t),t.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function e(e,t,o,n){function u(e){e.$valid&&(S=Date.now(),t.retrieve(E.retrieveData).then(function(e){console.log("comment retrieve success")},function(e){console.log("comment retrieve error")}))}function s(e){F=Date.now(),console.log("subRetrieveConfirmed"),E.retrieveRequests.push({requestStart:S,requestEnd:F,requestDuration:F-S,data:e})}function a(e){F=Date.now(),console.log("subRetrieveFailed"),E.retrieveRequests.push({requestStart:S,requestEnd:F,requestDuration:F-S,data:e})}function r(e){if(e.$valid){var o=angular.extend({},E.createData);o.comment_body=n.structureField({value:o.comment_body_value}),delete o.comment_body_value,S=Date.now(),t.create(o).then(function(e){console.log("comment create success")},function(e){console.log("comment create error")})}}function l(e){F=Date.now(),console.log("subCreateConfirmed"),E.createRequests.push({requestStart:S,requestEnd:F,requestDuration:F-S,data:e})}function c(e){F=Date.now(),console.log("subCreateFailed"),E.createRequests.push({requestStart:S,requestEnd:F,requestDuration:F-S,data:e})}function d(e){if(e.$valid){var o=angular.extend({},E.updateData);o.comment_body=n.structureField({value:o.comment_body_value}),delete o.comment_body_value,S=Date.now(),t.update(o).then(function(e){console.log("comment update success")},function(e){console.log("comment update error")})}}function i(e){F=Date.now(),console.log("subUpdateConfirmed"),E.updateRequests.push({requestStart:S,requestEnd:F,requestDuration:F-S,data:e})}function m(e){F=Date.now(),console.log("subUpdateFailed"),E.updateRequests.push({requestStart:S,requestEnd:F,requestDuration:F-S,data:e})}function q(e){e.$valid&&(S=Date.now(),t["delete"](E.deleteData).then(function(e){console.log("comment delete success")},function(e){console.log("comment delete error")}))}function D(e){F=Date.now(),console.log("subDeleteConfirmed"),E.deleteRequests.push({requestStart:S,requestEnd:F,requestDuration:F-S,data:e})}function f(e){F=Date.now(),E.deleteErrors=e,console.log("subDeleteFailed"),E.deleteRequests.push({requestStart:S,requestEnd:F,requestDuration:F-S,data:e})}function C(e){e.$valid&&(S=Date.now(),t.index(E.indexData).then(function(e){console.log("comment index success")},function(e){console.log("comment index error")}))}function p(e){F=Date.now(),console.log("subIndexConfirmed"),E.indexRequests.push({requestStart:S,requestEnd:F,requestDuration:F-S,data:e})}function g(e){F=Date.now(),console.log("subIndexFailed"),E.indexRequests.push({requestStart:S,requestEnd:F,requestDuration:F-S,data:e})}function v(e){console.log(e,E.countAllData),e.$valid&&(S=Date.now(),t.countAll(E.countAllData).then(function(e){console.log("comment countAll success")},function(e){console.log("comment countAll error")}))}function b(e){F=Date.now(),console.log("subCountAllConfirmed"),E.countAllRequests.push({requestStart:S,requestEnd:F,requestDuration:F-S,data:e})}function w(e){F=Date.now(),console.log("subCountAllFailed"),E.countAllRequests.push({requestStart:S,requestEnd:F,requestDuration:F-S,data:e})}function R(e){e.$valid&&(S=Date.now(),t.countNew(E.countNewData).then(function(e){console.log("comment countNew success")},function(e){console.log("comment countNew error")}))}function h(e){F=Date.now(),console.log("subCountNewConfirmed"),E.countNewRequests.push({requestStart:S,requestEnd:F,requestDuration:F-S,data:e})}function x(e){F=Date.now(),console.log("subCountNewFailed"),E.countNewRequests.push({requestStart:S,requestEnd:F,requestDuration:F-S,data:e})}console.log("CommentController");var F=0,S=0,E=this;E.retrieveRequests=[],E.retrieveData={},E.doRetrieve=u,o.subRetrieveConfirmed(e,s),o.subRetrieveFailed(e,a),E.createRequests=[],E.createData={},E.doCreate=r,o.subCreateConfirmed(e,l),o.subCreateFailed(e,c),E.updateRequests=[],E.updateData={},E.doUpdate=d,o.subUpdateConfirmed(e,i),o.subUpdateFailed(e,m),E.deleteRequests=[],E.deleteErrors={},E.deleteData={},E.doDelete=q,o.subDeleteConfirmed(e,D),o.subDeleteFailed(e,f),E.indexRequests=[],E.indexData={},E.indexData.page=0,E.indexData.fields={},E.indexData.parameters={},E.indexData.pagesize=5,E.indexFieldsColapsed=!0,E.indexParametersColapsed=!0,E.doIndex=C,o.subIndexConfirmed(e,p),o.subIndexFailed(e,g),E.countAllRequests=[],E.countAllData={},E.doCountAll=v,o.subCountAllConfirmed(e,b),o.subCountAllFailed(e,w),E.countNewRequests=[],E.countNewData={},E.doCountNew=R,o.subCountNewConfirmed(e,h),o.subCountNewFailed(e,x)}angular.module("ngDrupalServicesTests.comment.controller",["d7-services.resources.comment.resource","d7-services.resources.comment.channel","d7-services.commons.helperService"]).controller("CommentController",e),e.$inject=["$scope","CommentResource","CommentChannel","DrupalHelperService"]}();
!function(){"use strict";function e(e,t){console.log("Comment configFunction"),e.state("app.services_3x.comment",{url:"/comment","abstract":!0,views:{comment:{templateUrl:"./app/components/comment/comment.view.html",controller:"CommentController",controllerAs:"comment"}}}).state("app.services_3x.comment.retrieve",{url:"/retrieve",deepStateRedirect:!0,sticky:!0,views:{retrieve:{templateUrl:"./app/components/comment/templates/retrieve.html"}}}).state("app.services_3x.comment.create",{url:"/create",deepStateRedirect:!0,sticky:!0,views:{create:{templateUrl:"./app/components/comment/templates/create.html"}}}).state("app.services_3x.comment.update",{url:"/update",deepStateRedirect:!0,sticky:!0,views:{update:{templateUrl:"./app/components/comment/templates/update.html"}}}).state("app.services_3x.comment.delete",{url:"/delete",deepStateRedirect:!0,sticky:!0,views:{"delete":{templateUrl:"./app/components/comment/templates/delete.html"}}}).state("app.services_3x.comment.index",{url:"/index",deepStateRedirect:!0,sticky:!0,views:{index:{templateUrl:"./app/components/comment/templates/index.html"}}}).state("app.services_3x.comment.countAll",{url:"/countAll",deepStateRedirect:!0,sticky:!0,views:{countAll:{templateUrl:"./app/components/comment/templates/countAll.html"}}}).state("app.services_3x.comment.countNew",{url:"/countNew",deepStateRedirect:!0,sticky:!0,views:{countNew:{templateUrl:"./app/components/comment/templates/countNew.html"}}})}angular.module("ngDrupalServicesTests.comment.states",["ui.router","ct.ui.router.extras","ngDrupalServicesTests.comment.controller"]).config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function e(e,t,a){function s(e){e.$valid&&(V=Date.now(),t.connect().then(function(e){console.log("system connect success",e)},function(e){console.log("system connect error")}))}function n(e){f=Date.now(),console.log("subConnectConfirmed"),g.connectRequests.push({requestStart:V,requestEnd:f,requestDuration:f-V,data:e})}function o(e){f=Date.now(),console.log("subConnectFailed"),g.connectRequests.push({requestStart:V,requestEnd:f,requestDuration:f-V,data:e})}function r(e){e.$valid&&(V=Date.now(),t.get_variable(g.getVariableData).then(function(e){console.log("system get_variable success")},function(e){console.log("system get_variable error")}))}function l(e){f=Date.now(),console.log("subGetVariableConfirmed"),g.getVariableRequests.push({requestStart:V,requestEnd:f,requestDuration:f-V,data:e})}function u(e){f=Date.now(),console.log("subGetVariableFailed"),g.getVariableRequests.push({requestStart:V,requestEnd:f,requestDuration:f-V,data:e})}function i(e){e.$valid&&(V=Date.now(),t.set_variable(g.setVariableData).then(function(e){console.log("system set_variable success")},function(e){console.log("system set_variable error")}))}function c(e){f=Date.now(),console.log("subSetVariableConfirmed"),g.setVariableRequests.push({requestStart:V,requestEnd:f,requestDuration:f-V,data:e})}function b(e){f=Date.now(),console.log("subSetVariableFailed"),g.setVariableRequests.push({requestStart:V,requestEnd:f,requestDuration:f-V,data:e})}function d(e){e.$valid&&(V=Date.now(),t.del_variable(g.delVariableData).then(function(e){console.log("system del_variable success")},function(e){console.log("system del_variable error")}))}function q(e){f=Date.now(),console.log("subDelVariableConfirmed"),g.delVariableRequests.push({requestStart:V,requestEnd:f,requestDuration:f-V,data:e})}function D(e){f=Date.now(),console.log("subDelVariableFailed"),g.delVariableRequests.push({requestStart:V,requestEnd:f,requestDuration:f-V,data:e})}var f=0,V=0,g=this;g.connectRequests=[],g.doConncet=s,a.subConnectConfirmed(e,n),a.subConnectFailed(e,o),g.getVariableRequests=[],g.doGetVariable=r,g.getVariableData={name:"","default":""},a.subGetVariableConfirmed(e,l),a.subGetVariableFailed(e,u),g.setVariableRequests=[],g.doSetVariable=i,g.setVariableData={name:"",value:""},a.subSetVariableConfirmed(e,c),a.subSetVariableFailed(e,b),g.delVariableRequests=[],g.doDelVariable=d,g.delVariableData={name:""},a.subDelVariableConfirmed(e,q),a.subDelVariableFailed(e,D)}angular.module("ngDrupalServicesTests.system.controller",["d7-services.resources.system.resource","d7-services.resources.system.channel"]).controller("SystemController",e),e.$inject=["$scope","SystemResource","SystemChannel"]}();
!function(){"use strict";function e(e,t){e.state("app.services_3x.system",{url:"/system","abstract":!0,views:{system:{templateUrl:"./app/components/system/system.view.html",controller:"SystemController",controllerAs:"system"}}}).state("app.services_3x.system.connect",{url:"/connect",deepStateRedirect:!0,sticky:!0,views:{connect:{templateUrl:"./app/components/system/templates/connect.html"}}}).state("app.services_3x.system.get_variable",{url:"/get_variable",deepStateRedirect:!0,sticky:!0,views:{getVariable:{templateUrl:"./app/components/system/templates/getVariable.html"}}}).state("app.services_3x.system.set_variable",{url:"/set_variables",deepStateRedirect:!0,sticky:!0,views:{setVariable:{templateUrl:"./app/components/system/templates/setVariable.html"}}}).state("app.services_3x.system.del_variable",{url:"/del_variable",deepStateRedirect:!0,sticky:!0,views:{delVariable:{templateUrl:"./app/components/system/templates/delVariable.html"}}})}angular.module("ngDrupalServicesTests.system.states",["ui.router","ct.ui.router.extras","ngDrupalServicesTests.system.controller"]).config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function e(e,s,t,o){function n(e){e.$valid&&(G=Date.now(),s.retrieve(J.retrieveData).then(function(e){console.log("user retrieve success")},function(e){console.log("user retrieve error")}))}function u(e){B=Date.now(),console.log("subRetrieveConfirmed"),J.retrieveRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function r(e){B=Date.now(),console.log("subRetrieveFailed"),J.retrieveRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function a(e){e.$valid&&(G=Date.now(),s.login(J.loginData).then(function(e){console.log("user login success")},function(e){console.log("user login error")}))}function i(e){B=Date.now(),console.log("subLoginConfirmed"),J.loginRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function l(e){B=Date.now(),console.log("subLoginFailed"),J.loginRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function d(e){e.$valid&&(G=Date.now(),s.logout(J.logoutData).then(function(e){console.log("user logout success")},function(e){console.log("user logout error")}))}function c(e){B=Date.now(),console.log("subLogoutConfirmed"),J.logoutRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function q(e){B=Date.now(),console.log("subLogoutFailed"),J.logoutRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function D(e){e.$valid&&(G=Date.now(),s.token(J.tokenData).then(function(e){console.log("user token success")},function(e){console.log("user token error")}))}function f(e){B=Date.now(),console.log("subTokenConfirmed"),J.tokenRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function g(e){B=Date.now(),console.log("subTokenFailed"),J.tokenRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function w(e){console.log("SDF"),e.$valid&&(console.log("SDF"),J.createData.field_nickname=o.structureField(J.createData.field_nickname),G=Date.now(),s.create(J.createData).then(function(e){console.log("user create success")},function(e){console.log("user create error")}))}function R(e){B=Date.now(),console.log("subCreateConfirmed"),J.createRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function m(e){B=Date.now(),console.log("subCreateFailed"),J.createRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function p(e){e.$valid&&(J.updateData.field_nickname=o.structureField(J.createData.field_nickname),G=Date.now(),s.update(J.updateData).then(function(e){console.log("user update success")},function(e){console.log("user update error")}))}function b(e){B=Date.now(),console.log("subUpdateConfirmed"),J.updateRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function h(e){B=Date.now(),console.log("subUpdateFailed"),J.updateRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function E(e){e.$valid&&(G=Date.now(),s["delete"](J.deleteData).then(function(e){console.log("user delete success")},function(e){console.log("user delete error")}))}function C(e){B=Date.now(),console.log("subDeleteConfirmed"),J.deleteRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function F(e){B=Date.now(),J.deleteErrors=e,console.log("subDeleteFailed"),J.deleteRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function S(e){e.$valid&&(G=Date.now(),s.index(J.indexData).then(function(e){console.log("user index success")},function(e){console.log("user index error")}))}function v(e){B=Date.now(),console.log("subIndexConfirmed"),J.indexRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function x(e){B=Date.now(),console.log("subIndexFailed"),J.indexRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function P(e){e.$valid&&(G=Date.now(),s.register(J.registerData).then(function(e){console.log("user register success")},function(e){console.log("user register error")}))}function k(e){B=Date.now(),console.log("subRegisterConfirmed"),J.registerRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function N(e){B=Date.now(),console.log("subRegisterFailed"),J.registerRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function W(e){e.$valid&&(G=Date.now(),s.resendWelcomeEmail(J.resendWelcomeEmailData).then(function(e){console.log("user resendWelcomeEmail success")},function(e){console.log("user resendWelcomeEmail error")}))}function $(e){B=Date.now(),console.log("subResendWelcomeEmailConfirmed"),J.resendWelcomeEmailRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function L(e){B=Date.now(),console.log("subResendWelcomeEmailFailed"),J.resendWelcomeEmailRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function U(){G=Date.now(),s.cancel(J.cancelData).then(function(e){console.log("user cancel success")},function(e){console.log("user cancel error")})}function T(e){B=Date.now(),console.log("subCancelConfirmed"),J.cancelRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function I(e){B=Date.now(),console.log("subCancelFailed"),J.cancelRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function _(){G=Date.now(),s.passwordReset(J.passwordResetData).then(function(e){console.log("user passwordReset success")},function(e){console.log("user passwordReset error")})}function j(e){B=Date.now(),console.log("subPasswordResetConfirmed"),J.passwordResetRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function z(e){B=Date.now(),console.log("subPasswordResetFailed"),J.passwordResetRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function H(){G=Date.now(),s.requestNewPassword(J.requestNewPasswordData).then(function(e){console.log("user requestNewPassword success")},function(e){console.log("user requestNewPassword error")})}function y(e){B=Date.now(),console.log("subRequestNewPasswordConfirmed"),J.requestNewPasswordRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}function A(e){B=Date.now(),console.log("subRequestNewPasswordFailed"),J.requestNewPasswordRequests.push({requestStart:G,requestEnd:B,requestDuration:B-G,data:e})}var B=0,G=0,J=this;J.retrieveRequests=[],J.retrieveData={uid:""},J.doRetrieve=n,t.subRetrieveConfirmed(e,u),t.subRetrieveFailed(e,r),J.loginRequests=[],J.loginData={uid:""},J.doLogin=a,t.subLoginConfirmed(e,i),t.subLoginFailed(e,l),J.logoutRequests=[],J.doLogout=d,t.subLogoutConfirmed(e,c),t.subLogoutFailed(e,q),J.tokenRequests=[],J.doToken=D,t.subTokenConfirmed(e,f),t.subTokenFailed(e,g),J.createRequests=[],J.createData={name:"s",pass:"s",mail:"s@s.at"},J.doCreate=w,t.subCreateConfirmed(e,R),t.subCreateFailed(e,m),J.updateRequests=[],J.updateData={},J.doUpdate=p,t.subUpdateConfirmed(e,b),t.subUpdateFailed(e,h),J.deleteRequests=[],J.deleteErrors={},J.deleteData={uid:""},J.doDelete=E,t.subDeleteConfirmed(e,C),t.subDeleteFailed(e,F),J.indexRequests=[],J.indexData={},J.indexData.page=0,J.indexData.fields={},J.indexData.parameters={},J.indexData.pagesize=5,J.indexFieldsColapsed=!0,J.indexParametersColapsed=!0,J.doIndex=S,t.subIndexConfirmed(e,v),t.subIndexFailed(e,x),J.registerRequests=[],J.registerData={name:"s",pass:"s",mail:"s@s.at"},J.doRegister=P,t.subRegisterConfirmed(e,k),t.subRegisterFailed(e,N),J.resendWelcomeEmailRequests=[],J.resendWelcomeEmailData={uid:""},J.doResendWelcomeEmail=W,t.subResendWelcomeEmailConfirmed(e,$),t.subResendWelcomeEmailFailed(e,L),J.cancelRequests=[],J.cancelData={name:"s",pass:"s",mail:"s@s.at"},J.doCancel=U,t.subCancelConfirmed(e,T),t.subCancelFailed(e,I),J.passwordResetRequests=[],J.passwordResetData={name:"s",pass:"s",mail:"s@s.at"},J.doPasswordReset=_,t.subPasswordResetConfirmed(e,j),t.subPasswordResetFailed(e,z),J.requestNewPasswordRequests=[],J.requestNewPasswordData={uid:""},J.doRequestNewPassword=H,t.subRequestNewPasswordConfirmed(e,y),t.subRequestNewPasswordFailed(e,A)}angular.module("ngDrupalServicesTests.user.controller",["d7-services.resources.user.resource","d7-services.resources.user.channel","d7-services.commons.helperService"]).controller("UserController",e),e.$inject=["$scope","UserResource","UserChannel","DrupalHelperService"]}();
!function(){"use strict";function e(e,t){e.state("app.services_3x.user",{url:"/user","abstract":!0,views:{user:{templateUrl:"./app/components/user/user.view.html",controller:"UserController",controllerAs:"user"}}}).state("app.services_3x.user.retrieve",{url:"/retrieve",deepStateRedirect:!0,sticky:!0,views:{retrieve:{templateUrl:"./app/components/user/templates/retrieve.html"}}}).state("app.services_3x.user.create",{url:"/create",deepStateRedirect:!0,sticky:!0,views:{create:{templateUrl:"./app/components/user/templates/create.html"}}}).state("app.services_3x.user.update",{url:"/update",deepStateRedirect:!0,sticky:!0,views:{update:{templateUrl:"./app/components/user/templates/update.html"}}}).state("app.services_3x.user.delete",{url:"/delete",deepStateRedirect:!0,sticky:!0,views:{"delete":{templateUrl:"./app/components/user/templates/delete.html"}}}).state("app.services_3x.user.index",{url:"/index",deepStateRedirect:!0,sticky:!0,views:{index:{templateUrl:"./app/components/user/templates/index.html"}}}).state("app.services_3x.user.register",{url:"/register",deepStateRedirect:!0,sticky:!0,views:{register:{templateUrl:"./app/components/user/templates/register.html"}}}).state("app.services_3x.user.resend_welcome_email",{url:"/resend_welcome_email",deepStateRedirect:!0,sticky:!0,views:{resendWelcomeEmail:{templateUrl:"./app/components/user/templates/resendWelcomeEmail.html"}}}).state("app.services_3x.user.cancel",{url:"/cancel",deepStateRedirect:!0,sticky:!0,views:{cancel:{templateUrl:"./app/components/user/templates/cancel.html"}}}).state("app.services_3x.user.password_reset",{url:"/password_reset",deepStateRedirect:!0,sticky:!0,views:{passwordReset:{templateUrl:"./app/components/user/templates/passwordReset.html"}}}).state("app.services_3x.user.request_new_password",{url:"/request_new_password",deepStateRedirect:!0,sticky:!0,views:{requestNewPassword:{templateUrl:"./app/components/user/templates/requestNewPassword.html"}}}).state("app.services_3x.user.login",{url:"/login",deepStateRedirect:!0,sticky:!0,views:{login:{templateUrl:"./app/components/user/templates/login.html"}}}).state("app.services_3x.user.logout",{url:"/logout",deepStateRedirect:!0,sticky:!0,views:{logout:{templateUrl:"./app/components/user/templates/logout.html"}}}).state("app.services_3x.user.token",{url:"/token",deepStateRedirect:!0,sticky:!0,views:{token:{templateUrl:"./app/components/user/templates/token.html"}}})}angular.module("ngDrupalServicesTests.user.states",["ui.router","ct.ui.router.extras","ngDrupalServicesTests.user.controller"]).config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function e(e,t,o,s){function n(e){e.$valid&&(_=Date.now(),t.retrieve($.retrieveData).then(function(e){console.log("node retrieve success")},function(e){console.log("node retrieve error")}))}function a(e){y=Date.now(),console.log("subRetrieveConfirmed"),$.retrieveRequests.push({requestStart:_,requestEnd:y,requestDuration:y-_,data:e})}function u(e){y=Date.now(),console.log("subRetrieveFailed"),$.retrieveRequests.push({requestStart:_,requestEnd:y,requestDuration:y-_,data:e})}function r(e){if(e.$valid){var o=angular.extend({},$.createData);o.body=s.structureField({value:o.body_value,summary:o.body_summary}),delete o.body_value,delete o.body_summary,o.field_custom_field=s.structureField({value:o.field_custom_field}),_=Date.now(),t.create(o).then(function(e){console.log("node create success")},function(e){console.log("node create error")})}}function d(e){y=Date.now(),console.log("subCreateConfirmed"),$.createRequests.push({requestStart:_,requestEnd:y,requestDuration:y-_,data:e})}function i(e){y=Date.now(),console.log("subCreateFailed"),$.createRequests.push({requestStart:_,requestEnd:y,requestDuration:y-_,data:e})}function l(e){if(e.$valid){var o=angular.extend({},$.updateData);o.body=s.structureField({value:o.body_value,summary:o.body_summary}),delete o.body_value,delete o.body_summary,o.field_custom_field=s.structureField({value:o.field_custom_field}),_=Date.now(),t.update(o).then(function(e){console.log("node update success")},function(e){console.log("node update error")})}}function c(e){y=Date.now(),console.log("subUpdateConfirmed"),$.updateRequests.push({requestStart:_,requestEnd:y,requestDuration:y-_,data:e})}function f(e){y=Date.now(),console.log("subUpdateFailed"),$.updateRequests.push({requestStart:_,requestEnd:y,requestDuration:y-_,data:e})}function q(e){e.$valid&&(_=Date.now(),t["delete"]($.deleteData).then(function(e){console.log("node delete success")},function(e){console.log("node delete error")}))}function D(e){y=Date.now(),console.log("subDeleteConfirmed"),$.deleteRequests.push({requestStart:_,requestEnd:y,requestDuration:y-_,data:e})}function m(e){y=Date.now(),$.deleteErrors=e,console.log("subDeleteFailed"),$.deleteRequests.push({requestStart:_,requestEnd:y,requestDuration:y-_,data:e})}function b(e){e.$valid&&(_=Date.now(),t.index($.indexData).then(function(e){console.log("node index success")},function(e){console.log("node index error")}))}function h(e){y=Date.now(),console.log("subIndexConfirmed"),$.indexRequests.push({requestStart:_,requestEnd:y,requestDuration:y-_,data:e})}function p(e){y=Date.now(),console.log("subIndexFailed"),$.indexRequests.push({requestStart:_,requestEnd:y,requestDuration:y-_,data:e})}function F(e){e.$valid&&(console.log("SADF"),_=Date.now(),t.files($.filesData).then(function(e){console.log("node files success")},function(e){console.log("node files error")}))}function g(e){y=Date.now(),console.log("subFilesConfirmed"),$.filesRequests.push({requestStart:_,requestEnd:y,requestDuration:y-_,data:e})}function v(e){y=Date.now(),console.log("subFilesFailed"),$.filesRequests.push({requestStart:_,requestEnd:y,requestDuration:y-_,data:e})}function C(e){e.$valid&&(_=Date.now(),t.comments($.commentsData).then(function(e){console.log("node comments success")},function(e){console.log("node comments error")}))}function R(e){y=Date.now(),console.log("subCommentsConfirmed"),$.commentsRequests.push({requestStart:_,requestEnd:y,requestDuration:y-_,data:e})}function w(e){y=Date.now(),console.log("subCommentsFailed"),$.commentsRequests.push({requestStart:_,requestEnd:y,requestDuration:y-_,data:e})}function x(e){e.$valid&&(_=Date.now(),t.attachFile($.attachFileData).then(function(e){console.log("node attachFile success")},function(e){console.log("node attachFile error")}))}function E(e){y=Date.now(),console.log("subAttachFileConfirmed"),$.attachFileRequests.push({requestStart:_,requestEnd:y,requestDuration:y-_,data:e})}function S(e){y=Date.now(),console.log("subAttachFileFailed"),$.attachFileRequests.push({requestStart:_,requestEnd:y,requestDuration:y-_,data:e})}var y=0,_=0,$=this;$.descriptionColapsed=!0,$.retrieveRequests=[],$.retrieveData={},$.doRetrieve=n,o.subRetrieveConfirmed(e,a),o.subRetrieveFailed(e,u),$.createRequests=[],$.createData={},$.doCreate=r,o.subCreateConfirmed(e,d),o.subCreateFailed(e,i),$.updateRequests=[],$.updateData={},$.doUpdate=l,o.subUpdateConfirmed(e,c),o.subUpdateFailed(e,f),$.deleteRequests=[],$.deleteErrors={},$.deleteData={},$.doDelete=q,o.subDeleteConfirmed(e,D),o.subDeleteFailed(e,m),$.indexRequests=[],$.indexData={},$.indexData.page=0,$.indexData.fields={},$.indexData.parameters={},$.indexData.pagesize=5,$.indexFieldsColapsed=!0,$.indexParametersColapsed=!0,$.doIndex=b,o.subIndexConfirmed(e,h),o.subIndexFailed(e,p),$.filesRequests=[],$.filesErrors={},$.filesData={},$.doFiles=F,o.subFilesConfirmed(e,g),o.subFilesFailed(e,v),$.commentsRequests=[],$.commentsErrors={},$.commentsData={nid:""},$.doComments=C,o.subCommentsConfirmed(e,R),o.subCommentsFailed(e,w),$.attachFileRequests=[],$.attachFileErrors={},$.attachFileData={},$.doAttachFile=x,o.subAttachFileConfirmed(e,E),o.subAttachFileFailed(e,S)}angular.module("ngDrupalServicesTests.node.controller",["d7-services.resources.node.resource","d7-services.resources.node.channel","d7-services.commons.helperService"]).controller("NodeController",e),e.$inject=["$scope","NodeResource","NodeChannel","DrupalHelperService"]}();
!function(){"use strict";function e(e,t){e.state("app.services_3x.node",{url:"/node","abstract":!0,views:{node:{templateUrl:"./app/components/node/node.view.html",controller:"NodeController",controllerAs:"node"}}}).state("app.services_3x.node.retrieve",{url:"/retrieve",deepStateRedirect:!0,sticky:!0,views:{retrieve:{templateUrl:"./app/components/node/templates/retrieve.html"}}}).state("app.services_3x.node.create",{url:"/create",deepStateRedirect:!0,sticky:!0,views:{create:{templateUrl:"./app/components/node/templates/create.html"}}}).state("app.services_3x.node.update",{url:"/update",deepStateRedirect:!0,sticky:!0,views:{update:{templateUrl:"./app/components/node/templates/update.html"}}}).state("app.services_3x.node.delete",{url:"/delete",deepStateRedirect:!0,sticky:!0,views:{"delete":{templateUrl:"./app/components/node/templates/delete.html"}}}).state("app.services_3x.node.index",{url:"/index",deepStateRedirect:!0,sticky:!0,views:{index:{templateUrl:"./app/components/node/templates/index.html"}}}).state("app.services_3x.node.files",{url:"/files",deepStateRedirect:!0,sticky:!0,views:{files:{templateUrl:"./app/components/node/templates/files.html"}}}).state("app.services_3x.node.comments",{url:"/comments",deepStateRedirect:!0,sticky:!0,views:{comments:{templateUrl:"./app/components/node/templates/comments.html"}}}).state("app.services_3x.node.attach_file",{url:"/attachFile",deepStateRedirect:!0,sticky:!0,views:{attachFile:{templateUrl:"./app/components/node/templates/attachFile.html"}}})}angular.module("ngDrupalServicesTests.node.states",["ui.router","ct.ui.router.extras","ngDrupalServicesTests.node.controller"]).config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function e(e,t,a,r){function n(e){e.$valid&&(w=Date.now(),t.retrieve(v.retrieveData).then(function(e){console.log("file retrieve success")},function(e){console.log("file retrieve error")}))}function s(e){p=Date.now(),console.log("subRetrieveConfirmed"),v.retrieveRequests.push({requestStart:w,requestEnd:p,requestDuration:p-w,data:e})}function o(e){p=Date.now(),console.log("subRetrieveFailed"),v.retrieveRequests.push({requestStart:w,requestEnd:p,requestDuration:p-w,data:e})}function i(e){e.$valid&&(w=Date.now(),t.create(v.createData).then(function(e){console.log("file create success")},function(e){console.log("file create error")}))}function u(e){p=Date.now(),console.log("subCreateConfirmed"),v.createRequests.push({requestStart:w,requestEnd:p,requestDuration:p-w,data:e})}function l(e){p=Date.now(),console.log("subCreateFailed"),v.createRequests.push({requestStart:w,requestEnd:p,requestDuration:p-w,data:e})}function c(e){e.$valid&&(w=Date.now(),t["delete"](v.deleteData).then(function(e){console.log("file delete success")},function(e){console.log("file delete error")}))}function d(e){p=Date.now(),console.log("subDeleteConfirmed"),v.deleteRequests.push({requestStart:w,requestEnd:p,requestDuration:p-w,data:e})}function A(e){p=Date.now(),v.deleteErrors=e,console.log("subDeleteFailed"),v.deleteRequests.push({requestStart:w,requestEnd:p,requestDuration:p-w,data:e})}function f(e){e.$valid&&(w=Date.now(),t.index(v.indexData).then(function(e){console.log("file index success")},function(e){console.log("file index error")}))}function D(e){p=Date.now(),console.log("subIndexConfirmed"),v.indexRequests.push({requestStart:w,requestEnd:p,requestDuration:p-w,data:e})}function q(e){p=Date.now(),console.log("subIndexFailed"),v.indexRequests.push({requestStart:w,requestEnd:p,requestDuration:p-w,data:e})}function R(e){e.$valid&&(w=Date.now(),t.createRaw(v.createRawData).then(function(e){console.log("file createRaw success")},function(e){console.log("file createRaw error")}))}function g(e){p=Date.now(),v.createRawRequests.push({requestStart:w,requestEnd:p,requestDuration:p-w,data:e})}function C(e){p=Date.now(),v.createRawRequests.push({requestStart:w,requestEnd:p,requestDuration:p-w,data:e})}var p=0,w=0,v=this;v.descriptionColapsed=!0,v.retrieveRequests=[],v.retrieveData={fid:"",file_contents:"",image_styles:""},v.doRetrieve=n,a.subRetrieveConfirmed(e,s),a.subRetrieveFailed(e,o),v.createRequests=[],v.createData={},v.createData.file="R0lGODlhEAAQAMQAAORHHOVSKudfOulrSOp3WOyDZu6QdvCchPGolfO0o/XBs/fNwfjZ0frl3/zy7////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAkAABAALAAAAAAQABAAAAVVICSOZGlCQAosJ6mu7fiyZeKqNKToQGDsM8hBADgUXoGAiqhSvp5QAnQKGIgUhwFUYLCVDFCrKUE1lBavAViFIDlTImbKC5Gm2hB0SlBCBMQiB0UjIQA7",v.createData.filename="drupal.jpg",v.createData.filesize=v.createData.file.length,v.createData.filepath="content/node/20/",v.createData.filemime="image/jpeg",v.createData.image_file_name="drupal image",v.doCreate=i,a.subCreateConfirmed(e,u),a.subCreateFailed(e,l),v.deleteRequests=[],v.deleteErrors={},v.deleteData={fid:""},v.doDelete=c,a.subDeleteConfirmed(e,d),a.subDeleteFailed(e,A),v.indexRequests=[],v.indexData={},v.indexData.page=0,v.indexData.fields={},v.indexData.parameters={},v.indexData.pagesize=5,v.indexFieldsColapsed=!0,v.indexParametersColapsed=!0,v.doIndex=f,a.subIndexConfirmed(e,D),a.subIndexFailed(e,q),v.createRawRequests=[],v.createRawErrors={},v.doCreateRaw=R,a.subCreateRawConfirmed(e,g),a.subCreateRawFailed(e,C)}angular.module("ngDrupalServicesTests.file.controller",["d7-services.resources.file.resource","d7-services.resources.file.channel","d7-services.commons.helperService"]).controller("FileController",e),e.$inject=["$scope","FileResource","FileChannel","DrupalHelperService"]}();
!function(){"use strict";function e(e,t){e.state("app.services_3x.file",{url:"/file","abstract":!0,views:{file:{templateUrl:"./app/components/file/file.view.html",controller:"FileController",controllerAs:"file"}}}).state("app.services_3x.file.retrieve",{url:"/retrieve",deepStateRedirect:!0,sticky:!0,views:{retrieve:{templateUrl:"./app/components/file/templates/retrieve.html"}}}).state("app.services_3x.file.create",{url:"/create",deepStateRedirect:!0,sticky:!0,views:{create:{templateUrl:"./app/components/file/templates/create.html"}}}).state("app.services_3x.file.delete",{url:"/delete",deepStateRedirect:!0,sticky:!0,views:{"delete":{templateUrl:"./app/components/file/templates/delete.html"}}}).state("app.services_3x.file.index",{url:"/index",deepStateRedirect:!0,sticky:!0,views:{index:{templateUrl:"./app/components/file/templates/index.html"}}}).state("app.services_3x.file.createRaw",{url:"/create_raw",deepStateRedirect:!0,sticky:!0,views:{createRaw:{templateUrl:"./app/components/file/templates/createRaw.html"}}})}angular.module("ngDrupalServicesTests.file.states",["ui.router","ct.ui.router.extras","ngDrupalServicesTests.file.controller"]).config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function e(e,t,o){function n(e){e.$valid&&(C=Date.now(),t.retrieve(h.retrieveData).then(function(e){console.log("taxonomy_term retrieve success")},function(e){console.log("taxonomy_term retrieve error")}))}function s(e){v=Date.now(),console.log("subRetrieveConfirmed"),h.retrieveRequests.push({requestStart:C,requestEnd:v,requestDuration:v-C,data:e})}function a(e){v=Date.now(),console.log("subRetrieveFailed"),h.retrieveRequests.push({requestStart:C,requestEnd:v,requestDuration:v-C,data:e})}function r(e){e.$valid&&(C=Date.now(),t.create(h.createData).then(function(e){console.log("taxonomy_term create success")},function(e){console.log("taxonomy_term create error")}))}function u(e){v=Date.now(),console.log("subCreateConfirmed"),h.createRequests.push({requestStart:C,requestEnd:v,requestDuration:v-C,data:e})}function d(e){v=Date.now(),console.log("subCreateFailed"),h.createRequests.push({requestStart:C,requestEnd:v,requestDuration:v-C,data:e})}function l(e){e.$valid&&(C=Date.now(),t.update(h.updateData).then(function(e){console.log("taxonomy_term update success")},function(e){console.log("taxonomy_term update error")}))}function i(e){v=Date.now(),console.log("subUpdateConfirmed"),h.updateRequests.push({requestStart:C,requestEnd:v,requestDuration:v-C,data:e})}function c(e){v=Date.now(),console.log("subUpdateFailed"),h.updateRequests.push({requestStart:C,requestEnd:v,requestDuration:v-C,data:e})}function q(e){e.$valid&&(C=Date.now(),t["delete"](h.deleteData).then(function(e){console.log("taxonomy_term delete success")},function(e){console.log("taxonomy_term delete error")}))}function m(e){v=Date.now(),console.log("subDeleteConfirmed"),h.deleteRequests.push({requestStart:C,requestEnd:v,requestDuration:v-C,data:e})}function D(e){v=Date.now(),h.deleteErrors=e,console.log("subDeleteFailed"),h.deleteRequests.push({requestStart:C,requestEnd:v,requestDuration:v-C,data:e})}function f(e){e.$valid&&(C=Date.now(),t.index(h.indexData).then(function(e){console.log("taxonomy_term index success")},function(e){console.log("taxonomy_term index error")}))}function x(e){v=Date.now(),console.log("subIndexConfirmed"),h.indexRequests.push({requestStart:C,requestEnd:v,requestDuration:v-C,data:e})}function p(e){v=Date.now(),console.log("subIndexFailed"),h.indexRequests.push({requestStart:C,requestEnd:v,requestDuration:v-C,data:e})}function g(e){e.$valid&&(C=Date.now(),t.selectNodes(h.selectNodesData).then(function(e){console.log("taxonomy_term selectNodes success")},function(e){console.log("taxonomy_term selectNodes error")}))}function b(e){v=Date.now(),console.log("subSelectNodesConfirmed"),h.selectNodesRequests.push({requestStart:C,requestEnd:v,requestDuration:v-C,data:e})}function R(e){v=Date.now(),console.log("subSelectNodesFailed"),h.selectNodesRequests.push({requestStart:C,requestEnd:v,requestDuration:v-C,data:e})}console.log("TaxonomyTermController");var v=0,C=0,h=this;h.retrieveRequests=[],h.retrieveData={uid:""},h.doRetrieve=n,o.subRetrieveConfirmed(e,s),o.subRetrieveFailed(e,a),h.createRequests=[],h.createData={},h.doCreate=r,o.subCreateConfirmed(e,u),o.subCreateFailed(e,d),h.updateRequests=[],h.updateData={},h.doUpdate=l,o.subUpdateConfirmed(e,i),o.subUpdateFailed(e,c),h.deleteRequests=[],h.deleteErrors={},h.deleteData={uid:""},h.doDelete=q,o.subDeleteConfirmed(e,m),o.subDeleteFailed(e,D),h.indexRequests=[],h.indexData={},h.indexData.page=0,h.indexData.fields={},h.indexData.parameters={},h.indexData.pagesize=5,h.indexFieldsColapsed=!0,h.indexParametersColapsed=!0,h.doIndex=f,o.subIndexConfirmed(e,x),o.subIndexFailed(e,p),h.selectNodesRequests=[],h.selectNodesData={},h.doSelectNodes=g,o.subSelectNodesConfirmed(e,b),o.subSelectNodesFailed(e,R)}angular.module("ngDrupalServicesTests.taxonomy_term.controller",["d7-services.resources.taxonomy_term.resource","d7-services.resources.taxonomy_term.channel"]).controller("TaxonomyTermController",e),e.$inject=["$scope","TaxonomyTermResource","TaxonomyTermChannel"]}();
!function(){"use strict";function e(e,t){console.log("TaxonomyTerm configFunction"),e.state("app.services_3x.taxonomy_term",{url:"/taxonomy_term","abstract":!0,views:{taxonomy_term:{templateUrl:"./app/components/taxonomy_term/taxonomy_term.view.html",controller:"TaxonomyTermController",controllerAs:"taxonomy_term"}}}).state("app.services_3x.taxonomy_term.retrieve",{url:"/retrieve",deepStateRedirect:!0,sticky:!0,views:{retrieve:{templateUrl:"./app/components/taxonomy_term/templates/retrieve.html"}}}).state("app.services_3x.taxonomy_term.create",{url:"/create",deepStateRedirect:!0,sticky:!0,views:{create:{templateUrl:"./app/components/taxonomy_term/templates/create.html"}}}).state("app.services_3x.taxonomy_term.update",{url:"/update",deepStateRedirect:!0,sticky:!0,views:{update:{templateUrl:"./app/components/taxonomy_term/templates/update.html"}}}).state("app.services_3x.taxonomy_term.delete",{url:"/delete",deepStateRedirect:!0,sticky:!0,views:{"delete":{templateUrl:"./app/components/taxonomy_term/templates/delete.html"}}}).state("app.services_3x.taxonomy_term.index",{url:"/index",deepStateRedirect:!0,sticky:!0,views:{index:{templateUrl:"./app/components/taxonomy_term/templates/index.html"}}}).state("app.services_3x.taxonomy_term.selectNodes",{url:"/selectNodes",deepStateRedirect:!0,sticky:!0,views:{selectNodes:{templateUrl:"./app/components/taxonomy_term/templates/selectNodes.html"}}})}angular.module("ngDrupalServicesTests.taxonomy_term.states",["ui.router","ct.ui.router.extras","ngDrupalServicesTests.taxonomy_term.controller"]).config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function e(e,t,o){function a(e){console.log(C.retrieveData),e.$valid&&(R=Date.now(),t.retrieve(C.retrieveData).then(function(e){console.log("taxonomy_vocabulary retrieve success")},function(e){console.log("taxonomy_vocabulary retrieve error")}))}function n(e){p=Date.now(),console.log("subRetrieveConfirmed"),C.retrieveRequests.push({requestStart:R,requestEnd:p,requestDuration:p-R,data:e})}function r(e){p=Date.now(),console.log("subRetrieveFailed"),C.retrieveRequests.push({requestStart:R,requestEnd:p,requestDuration:p-R,data:e})}function s(e){e.$valid&&(R=Date.now(),t.create(C.createData).then(function(e){console.log("taxonomy_vocabulary create success")},function(e){console.log("taxonomy_vocabulary create error")}))}function u(e){p=Date.now(),console.log("subCreateConfirmed"),C.createRequests.push({requestStart:R,requestEnd:p,requestDuration:p-R,data:e})}function l(e){p=Date.now(),console.log("subCreateFailed"),C.createRequests.push({requestStart:R,requestEnd:p,requestDuration:p-R,data:e})}function c(e){console.log(e),e.$valid&&(console.log(e),R=Date.now(),t.update(C.updateData).then(function(e){console.log("taxonomy_vocabulary update success")},function(e){console.log("taxonomy_vocabulary update error")}))}function i(e){p=Date.now(),console.log("subUpdateConfirmed"),C.updateRequests.push({requestStart:R,requestEnd:p,requestDuration:p-R,data:e})}function d(e){p=Date.now(),console.log("subUpdateFailed"),C.updateRequests.push({requestStart:R,requestEnd:p,requestDuration:p-R,data:e})}function q(e){e.$valid&&(R=Date.now(),t["delete"](C.deleteData).then(function(e){console.log("taxonomy_vocabulary delete success")},function(e){console.log("taxonomy_vocabulary delete error")}))}function D(e){p=Date.now(),console.log("subDeleteConfirmed"),C.deleteRequests.push({requestStart:R,requestEnd:p,requestDuration:p-R,data:e})}function f(e){p=Date.now(),C.deleteErrors=e,console.log("subDeleteFailed"),C.deleteRequests.push({requestStart:R,requestEnd:p,requestDuration:p-R,data:e})}function b(e){e.$valid&&(R=Date.now(),t.index(C.indexData).then(function(e){console.log("taxonomy_vocabulary index success")},function(e){console.log("taxonomy_vocabulary index error")}))}function g(e){p=Date.now(),console.log("subIndexConfirmed"),C.indexRequests.push({requestStart:R,requestEnd:p,requestDuration:p-R,data:e})}function v(e){p=Date.now(),console.log("subIndexFailed"),C.indexRequests.push({requestStart:R,requestEnd:p,requestDuration:p-R,data:e})}function x(e){e.$valid&&(R=Date.now(),t.getTree(C.getTreeData).then(function(e){console.log("taxonomy_vocabulary getTree success")},function(e){console.log("taxonomy_vocabulary getTree error")}))}function y(e){p=Date.now(),console.log("subGetTreeConfirmed"),C.getTreeRequests.push({requestStart:R,requestEnd:p,requestDuration:p-R,data:e})}function m(e){p=Date.now(),console.log("subGetTreeFailed"),C.getTreeRequests.push({requestStart:R,requestEnd:p,requestDuration:p-R,data:e})}console.log("TaxonomyVocabularyController");var p=0,R=0,C=this;C.retrieveRequests=[],C.retrieveData={},C.doRetrieve=a,o.subRetrieveConfirmed(e,n),o.subRetrieveFailed(e,r),C.createRequests=[],C.createData={},C.doCreate=s,o.subCreateConfirmed(e,u),o.subCreateFailed(e,l),C.updateRequests=[],C.updateData={},C.doUpdate=c,o.subUpdateConfirmed(e,i),o.subUpdateFailed(e,d),C.deleteRequests=[],C.deleteErrors={},C.deleteData={},C.doDelete=q,o.subDeleteConfirmed(e,D),o.subDeleteFailed(e,f),C.indexRequests=[],C.indexData={},C.indexData.page=0,C.indexData.fields={},C.indexData.parameters={},C.indexData.pagesize=5,C.indexFieldsColapsed=!0,C.indexParametersColapsed=!0,C.doIndex=b,o.subIndexConfirmed(e,g),o.subIndexFailed(e,v),C.getTreeRequests=[],C.getTreeData={},C.doGetTree=x,o.subGetTreeConfirmed(e,y),o.subGetTreeFailed(e,m)}angular.module("ngDrupalServicesTests.taxonomy_vocabulary.controller",["d7-services.resources.taxonomy_vocabulary.resource","d7-services.resources.taxonomy_vocabulary.channel"]).controller("TaxonomyVocabularyController",e),e.$inject=["$scope","TaxonomyVocabularyResource","TaxonomyVocabularyChannel"]}();
!function(){"use strict";function e(e,t){console.log("TaxonomyVocabulary configFunction"),e.state("app.services_3x.taxonomy_vocabulary",{url:"/taxonomy_vocabulary","abstract":!0,views:{taxonomy_vocabulary:{templateUrl:"./app/components/taxonomy_vocabulary/taxonomy_vocabulary.view.html",controller:"TaxonomyVocabularyController",controllerAs:"taxonomy_vocabulary"}}}).state("app.services_3x.taxonomy_vocabulary.retrieve",{url:"/retrieve",deepStateRedirect:!0,sticky:!0,views:{retrieve:{templateUrl:"./app/components/taxonomy_vocabulary/templates/retrieve.html"}}}).state("app.services_3x.taxonomy_vocabulary.create",{url:"/create",deepStateRedirect:!0,sticky:!0,views:{create:{templateUrl:"./app/components/taxonomy_vocabulary/templates/create.html"}}}).state("app.services_3x.taxonomy_vocabulary.update",{url:"/update",deepStateRedirect:!0,sticky:!0,views:{update:{templateUrl:"./app/components/taxonomy_vocabulary/templates/update.html"}}}).state("app.services_3x.taxonomy_vocabulary.delete",{url:"/delete",deepStateRedirect:!0,sticky:!0,views:{"delete":{templateUrl:"./app/components/taxonomy_vocabulary/templates/delete.html"}}}).state("app.services_3x.taxonomy_vocabulary.index",{url:"/index",deepStateRedirect:!0,sticky:!0,views:{index:{templateUrl:"./app/components/taxonomy_vocabulary/templates/index.html"}}}).state("app.services_3x.taxonomy_vocabulary.getTree",{url:"/getTree",deepStateRedirect:!0,sticky:!0,views:{getTree:{templateUrl:"./app/components/taxonomy_vocabulary/templates/getTree.html"}}})}angular.module("ngDrupalServicesTests.taxonomy_vocabulary.states",["ui.router","ct.ui.router.extras","ngDrupalServicesTests.taxonomy_vocabulary.controller"]).config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";function e(e,t,r,s){function o(e){e.$valid&&(c.retrieveData.exposed_filters.comment_count_op===c.filters.regular_expression||c.retrieveData.exposed_filters.comment_count_op===c.filters.is_between||c.retrieveData.exposed_filters.comment_count_op===c.filters.is_not_between?(delete c.retrieveData.exposed_filters.comment_count.value,c.retrieveData.exposed_filters.comment_count_op===c.filters.regular_expression&&(delete c.retrieveData.exposed_filters.comment_count.min,delete c.retrieveData.exposed_filters.comment_count.max),(c.retrieveData.exposed_filters.comment_count_op===c.filters.is_between||c.retrieveData.exposed_filters.comment_count_op===c.filters.is_not_between)&&delete c.retrieveData.exposed_filters.comment_count.regular_expression):c.retrieveData.exposed_filters.comment_count&&(delete c.retrieveData.exposed_filters.comment_count.min,delete c.retrieveData.exposed_filters.comment_count.max,delete c.retrieveData.exposed_filters.comment_count.regular_expression),l=Date.now(),t.retrieve(c.retrieveData).then(function(e){console.log("views retrieve success",e)},function(e){console.log("views retrieve error",e)}))}function i(e){a=Date.now(),console.log("subRetrieveConfirmed"),c.retrieveRequests.push({requestStart:l,requestEnd:a,requestDuration:a-l,data:e})}function n(e){a=Date.now(),console.log("subRetrieveFailed"),c.retrieveRequests.push({requestStart:l,requestEnd:a,requestDuration:a-l,data:e})}var a=0,l=0,c=this;c.filters=s.filter_operators,c.sorts=s.sort_operators,c.retrieveRequests=[],c.retrieveData={},c.retrieveData.view_name="testview",c.retrieveData.exposed_sorts={},c.retrieveData.exposed_filters={},c.exposed_filtersCollapsed=!0,c.exposed_sortsCollapsed=!0,c.doRetrieve=o,r.subRetrieveConfirmed(e,i),r.subRetrieveFailed(e,n)}angular.module("ngDrupalServicesTests.views.controller",["d7-services.resources.views.resource","d7-services.resources.views.channel","d7-services.resources.views.operatorsConstant"]).controller("ViewsController",e),e.$inject=["$scope","ViewsResource","ViewsChannel","ViewsOperatorsConstant"]}();
!function(){"use strict";function e(e){e.state("app.services_views.views",{url:"/views","abstract":!0,views:{views:{templateUrl:"./app/components/views/views.view.html",controller:"ViewsController",controllerAs:"views"}}}).state("app.services_views.views.retrieve",{url:"/retrieve",deepStateRedirect:!0,sticky:!0,views:{retrieve:{templateUrl:"./app/components/views/templates/retrieve.html"}}})}angular.module("ngDrupalServicesTests.views.states",["ui.router","ct.ui.router.extras","ngDrupalServicesTests.views.controller"]).config(e),e.$inject=["$stateProvider"]}();
!function(){"use strict";function n(n){n.drupal_instance="http://dev-drulap-headless.pantheon.io/",n.api_endpoint+="v1/"}angular.module("ngDrupalServicesTests.config",[]).config(n),n.$inject=["DrupalApiConstant"]}();
!function(){"use strict";function e(e,s){s.otherwise("/app/home"),e.state("app",{url:"/app","abstract":!0,templateUrl:"app/app.view.html",controller:"AppController",controllerAs:"app"}).state("app.home",{url:"/home",deepStateRedirect:!0,sticky:!0,views:{mainNavContent:{templateUrl:"./app/components/home/home.view.html",controller:"HomeController",controllerAs:"home"}}}).state("app.commons",{url:"/commons","abstract":!0,views:{mainNavContent:{templateUrl:"./app/components/commons/commons.view.html",controller:"CommonsController",controllerAs:"authentication"}}}).state("app.services_3x",{url:"/services_3x","abstract":!0,views:{mainNavContent:{templateUrl:"app/components/services_3x/services_3x.view.html",controller:"Services_3xController",controllerAs:"services_3x"}}}).state("app.services_views",{url:"/services_views","abstract":!0,views:{mainNavContent:{templateUrl:"app/components/services_views/services_views.view.html",controller:"Services_ViewsController",controllerAs:"services_views"}}})}angular.module("ngDrupalServicesTests.states",["ui.router","ct.ui.router.extras","ngDrupalServicesTests.app.controller","ngDrupalServicesTests.home.controller","ngDrupalServicesTests.commons.controller","ngDrupalServicesTests.services_3x.controller","ngDrupalServicesTests.services_views.controller","ngDrupalServicesTests.authentication.states","ngDrupalServicesTests.comment.states","ngDrupalServicesTests.system.states","ngDrupalServicesTests.user.states","ngDrupalServicesTests.node.states","ngDrupalServicesTests.file.states","ngDrupalServicesTests.taxonomy_term.states","ngDrupalServicesTests.taxonomy_vocabulary.states","ngDrupalServicesTests.views.states"]).config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}();
!function(){"use strict";angular.module("ngDrupalServicesTests",["d7-services","ngDrupalServicesTests.config","ngDrupalServicesTests.states","ui.bootstrap","ngMessages","commons.directives.formControlFeedback"])}();
//# sourceMappingURL=maps/main.js.map